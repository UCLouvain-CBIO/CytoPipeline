% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CytoPipeline.R, R/CytoPipelineClass.R
\name{CytoPipeline}
\alias{CytoPipeline}
\alias{show,CytoPipeline-method}
\alias{CytoPipeline,missing-method}
\alias{CytoPipeline,list-method}
\alias{CytoPipeline,character-method}
\alias{as.list.CytoPipeline}
\alias{experimentName}
\alias{experimentName<-}
\alias{sampleFiles}
\alias{sampleFiles<-}
\alias{pData}
\alias{pData<-}
\title{CytoPipeline package}
\usage{
\S4method{show}{CytoPipeline}(object)

\S4method{CytoPipeline}{missing}(
  object,
  experimentName = "default_experiment",
  sampleFiles = character(),
  pData = NULL
)

\S4method{CytoPipeline}{list}(
  object,
  experimentName = "default_experiment",
  sampleFiles = character(),
  pData = NULL
)

\S4method{CytoPipeline}{character}(
  object,
  experimentName = "default_experiment",
  sampleFiles = character(),
  pData = NULL
)

\method{as.list}{CytoPipeline}(x, ...)

experimentName(x)

experimentName(x) <- value

sampleFiles(x)

sampleFiles(x) <- value

pData(x)

pData(x) <- value
}
\arguments{
\item{object}{a \code{character()} containing a JSON input}

\item{experimentName}{the experiment name}

\item{sampleFiles}{the sample files}

\item{pData}{the pheno Data (data.frame or NULL)}

\item{x}{a \code{CytoPipeline} object}

\item{...}{additional arguments (not used here)}

\item{value}{the new value to be assigned}
}
\value{
\itemize{
\item for \code{as.list.CytoPipeline}: the obtained list
}
}
\description{
\code{CytoPipeline} is a package that provides support for automation and
visualization of flow cytometry data analysis pipelines. In the current
state, the package focuses on the preprocessing and quality control part.

The framework is based on two main S4 classes, i.e. \code{CytoPipeline} and
\code{CytoProcessingStep}. The \code{CytoProcessingStep} defines the link between
pipeline step names and corresponding R functions that are either provided
in the CytoPipeline package itself, or exported from a third party package,
or coded by the user her/himself. The processing steps need to be specified
centrally and explicitly using either a json input file or through
step by step creation of a \code{CytoPipeline} object with dedicated methods.

After having run the pipeline, obtained results at all steps
can be retrieved and visualized thanks to file caching
(the running facility uses a \code{BiocFileCache} implementation).
The package provides also specific visualization tools like
pipeline workflow summary display, and 1D/2D comparison plots
of obtained flowFrames at various steps of the pipeline.

For a step by step example using \code{CytoPipeline}, please have a look
at the vignette!
}
\seealso{
\link{CytoPipelineClass}, \link{CytoProcessingStep}
}
