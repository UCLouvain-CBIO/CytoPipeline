% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CytoPipeline-functions.R
\name{execute}
\alias{execute}
\title{executing CytoPipeline object}
\usage{
execute(
  x,
  path = ".",
  rmCache = FALSE,
  useBiocParallel = FALSE,
  BPPARAM = BiocParallel::bpparam()
)
}
\arguments{
\item{x}{CytoPipeline object}

\item{path}{base path, a subdirectory with name equal to the experiment will
be created to store the output data, in particular the experiment cache}

\item{rmCache}{if TRUE, starts by removing the already existing cache
directory corresponding to the experiment}

\item{useBiocParallel}{if TRUE, use BiocParallel for computation of the
sample file pre-processing in parallel (one file per worker at a time).
Note the BiocParallel function used is \code{bplapply()}}

\item{BPPARAM}{if \code{useBiocParallel} is TRUE, sets the BPPARAM back-end to
be used for the computation. If not provided, will use the top back-end on
the \code{BiocParallel::registered()} stack.}
}
\value{
nothing
}
\description{
this function triggers the execution of the processing queues of
a CytoPipeline object.
First, the scale tranform processing queue is run, taking
the set of sample names as an implicit first input. At the end of the queue,
a scale transform List is assumed to be created.
Second, the flowFrame pre-processing queue, reapeatedly for each sample file.
The scale transform list generated in the previous step is taken as implicit
input, together with the initial sample file. At the end of the queue run, a
pre-processed flowFrame is assumed to be generated.
No change is made on the input CytoPipeline object, all results are stored in
the cache.
}
\examples{

### *** EXAMPLE 1: building CytoPipeline step by step *** ###

rawDataDir <-
    paste0(system.file("extdata", package = "CytoPipeline"), "/")
experimentName <- "OMIP021_PeacoQC"
sampleFiles <- paste0(rawDataDir, list.files(rawDataDir,
                                             pattern = "sample_"))
                                             
outputDir <- withr::local_tempdir()

# main parameters : sample files and output files
pipelineParams <- list()
pipelineParams$experimentName <- experimentName
pipelineParams$sampleFiles <- sampleFiles
pipL <- CytoPipeline(pipelineParams)

### SCALE TRANSFORMATION STEPS ###

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "scale transform",
                      CytoProcessingStep(
                          name = "flowframe_read",
                          FUN = "readSampleFiles",
                          ARGS = list(
                              whichSamples = "all",
                              truncate_max_range = FALSE,
                              min.limit = NULL
                          )
                      )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "scale transform",
                      CytoProcessingStep(
                          name = "remove_margins",
                          FUN = "removeMarginsPeacoQC",
                          ARGS = list()
                     )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "scale transform",
                      CytoProcessingStep(
                          name = "compensate",
                          FUN = "compensateFromMatrix",
                          ARGS = list(matrixSource = "fcs")
                      )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "scale transform",
                      CytoProcessingStep(
                          name = "flowframe_aggregate",
                          FUN = "aggregateAndSample",
                          ARGS = list(
                              nTotalEvents = 10000,
                              seed = 0
                          )
                      )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "scale transform",
                      CytoProcessingStep(
                          name = "scale_transform_estimate",
                          FUN = "estimateScaleTransforms",
                          ARGS = list(
                              fluoMethod = "estimateLogicle",
                              scatterMethod = "linear",
                              scatterRefMarker = "BV785 - CD3"
                          )
                      )
    )

### PRE-PROCESSING STEPS ###

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "pre-processing",
                      CytoProcessingStep(
                          name = "flowframe_read",
                          FUN = "readSampleFiles",
                          ARGS = list(
                              truncate_max_range = FALSE,
                              min.limit = NULL
                          )
                      )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "pre-processing",
                      CytoProcessingStep(
                          name = "remove_margins",
                          FUN = "removeMarginsPeacoQC",
                          ARGS = list()
                      )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "pre-processing",
                      CytoProcessingStep(
                          name = "compensate",
                          FUN = "compensateFromMatrix",
                          ARGS = list(matrixSource = "fcs")
                      )
    )

pipL <-
    addProcessingStep(
        pipL,
        whichQueue = "pre-processing",
        CytoProcessingStep(
            name = "remove_doublets",
            FUN = "removeDoubletsFlowStats",
            ARGS = list(
                areaChannels = c("FSC-A", "SSC-A"),
                heightChannels = c("FSC-H", "SSC-H"),
                wider_gate = TRUE
            )
        )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "pre-processing",
                      CytoProcessingStep(
                          name = "remove_debris",
                          FUN = "removeDebrisFlowClustTmix",
                          ARGS = list(
                              FSCChannel = c("FSC-A"),
                              SSCChannel = c("SSC-A"),
                              nClust = 3,
                              level = 0.97,
                              B = 100,
                              verbose = TRUE
                          )
                      )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "pre-processing",
                      CytoProcessingStep(
                          name = "remove_dead_cells",
                          FUN = "removeDeadCellsDeGate",
                          ARGS = list(
                              preTransform = TRUE,
                              LDMarker = "L/D Aqua - Viability"
                          )
                      )
    )

pipL <-
    addProcessingStep(
        pipL,
        whichQueue = "pre-processing",
        CytoProcessingStep(
            name = "perform_QC",
            FUN = "qualityControlPeacoQC",
            ARGS = list(
                preTransform = TRUE,
                min_cells = 150, # default
                max_bins = 500, # default
                step = 500, # default,
                MAD = 6, # default
                IT_limit = 0.55, # default
                force_IT = 150, # default
                peak_removal = 0.3333, # default
                min_nr_bins_peakdetection = 10 # default
            )
        )
    )

pipL <-
    addProcessingStep(pipL,
                      whichQueue = "pre-processing",
                      CytoProcessingStep(
                          name = "transform",
                          FUN = "applyScaleTransforms",
                          ARGS = list()
                      )
    )

# execute pipeline, remove cache if existing with the same experiment name
suppressWarnings(execute(pipL, rmCache = TRUE, path = outputDir))

# re-execute as is without removing cache => all results found in cache!
suppressWarnings(execute(pipL, rmCache = FALSE, path = outputDir))

### *** EXAMPLE 2: building CytoPipeline from JSON file *** ###

jsonDir <- system.file("extdata", package = "CytoPipeline")
jsonPath <- paste0(jsonDir, "/pipelineParams.json")

pipL2 <- CytoPipeline(jsonPath)

# note we temporarily set working directory into package root directory
# needed as json path mentions "./" path for sample files
withr::with_dir(new = jsonDir, {
     suppressWarnings(execute(pipL2, rmCache = TRUE, path = outputDir))})

### *** EXAMPLE 3: building CytoPipeline from cache (previously run) *** ###

experimentName <- "OMIP021_PeacoQC"
pipL3 <- buildCytoPipelineFromCache(
    experimentName = experimentName,
    path = outputDir)

suppressWarnings(execute(pipL3,
        rmCache = FALSE,
        path = outputDir))

}
