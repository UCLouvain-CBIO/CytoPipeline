CytoProcessingStep(
name = "remove_margins",
FUN = "removeMarginsPeacoQC",
ARGS = list()
))
plotCytoPipelineProcessingQueue(pipL6,
whichQueue = "scale transform")
plotCytoPipelineProcessingQueue(pipL6,
sampleFile = 1,
whichQueue = "pre-processing")
suppressWarnings(execute(pipL6, rmCache = FALSE))
plotCytoPipelineProcessingQueue(pipL6,
whichQueue = "scale transform")
plotCytoPipelineProcessingQueue(pipL6,
sampleFile = 1,
whichQueue = "pre-processing")
# add first sample file to see the impact
sampleFiles(pipL6) <- sampleFiles
plotCytoPipelineProcessingQueue(pipL6,
whichQueue = "scale transform")
# following should show yellow boxes
plotCytoPipelineProcessingQueue(pipL6,
whichQueue = "pre-processing")
# following should show bow in green
plotCytoPipelineProcessingQueue(pipL6,
sampleFile = 2,
whichQueue = "pre-processing")
suppressWarnings(execute(pipL6, rmCache = FALSE))
plotCytoPipelineProcessingQueue(pipL6,
whichQueue = "scale transform")
# following should now show the green box
plotCytoPipelineProcessingQueue(pipL6,
whichQueue = "pre-processing")
# following as well
plotCytoPipelineProcessingQueue(pipL6,
sampleFile = sampleFiles[2],
whichQueue = "pre-processing")
pipL6@flowFramesPreProcessingQueue[[2]]@name <- "aaaaaa"
expect_warning(plotCytoPipelineProcessingQueue(
pipL6,
whichQueue = "scale transform"),
regexp = "CytoPipeline object not consistent with cache")
expect_warning(plotCytoPipelineProcessingQueue(
pipL6,
sampleFile = 1,
whichQueue = "pre-processing"),
regexp = "CytoPipeline object not consistent with cache")
expect_error(execute(pipL6, rmCache = FALSE), regexp = "inconsistent")
})
pipL7 <- buildCytoPipelineFromCache(experimentName = experimentName)
pipL7
plotCytoPipelineProcessingQueue(pipL7,
sampleFile = 1,
whichQueue = "pre-processing")
getCytoPipelineObjectInfos(pipL7, whichQueue = "pre-processing",
sampleFile = sampleFiles[1])
getCytoPipelineObjectInfos(pipL7, whichQueue = "scale transform",
sampleFile = sampleFiles[1])
ffFrom <- getCytoPipelineFlowFrame(pipL7,
whichQueue = "pre-processing",
sampleFile = sampleFiles[1],
objectName = "compensate_obj")
ffTo <- getCytoPipelineFlowFrame(pipL7,
whichQueue = "pre-processing",
sampleFile = sampleFiles[1],
objectName = "remove_doublets_obj")
ggplotFilterEvents(ffFrom, ffTo, xChannel = "FSC-A", yChannel = "FSC-H")
plotCytoPipelineProcessingQueue(pipL7,
whichQueue = "scale transform")
expect_error(getCytoPipelineScaleTransform(pipL7,
whichQueue = "scale transform",
objectName = "flowframe_aggregate_obj"),
regexp = "does not appear to be transformList")
expect_error(getCytoPipelineScaleTransform(pipL7,
whichQueue = "scale transform",
objectName = "flowframe_aggregate_obj"),
regexp = "does not appear to be a transformList")
expect_error(transList <-
getCytoPipelineScaleTransform(pipL7,
whichQueue = "scale transform",
objectName = "scale_transform_estimate_obj"),
NA)
# flags controlling execution flow of this file
runPipelineStepImplementations <- TRUE
rawDataDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
rdsDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
sampleFiles <- paste0(rawDataDir, list.files(rawDataDir, pattern = "sample_"))
# reference compensated fcs file
comp_matrix <- flowCore::spillover(OMIP021Samples[[1]])$SPILL
ff_c <- FF_compensate(OMIP021Samples[[1]], spillover = comp_matrix)
ff_c <- compensate(OMIP021Samples[[1]], spillover = comp_matrix)
# reference scale transformation list
refTransListPath <- paste0(rdsDir, "OMIP021_TransList.rds")
refTransList <- readRDS(file = refTransListPath)
myFF <- OMIP021Samples[[1]]
flowCore::colnames(myFF)
flowCore::parameters(myFF)
flowCore::description(myFF)
unname(flowCore::parameters(myFF)@data[["desc"]])
ggplotEvents(myFF, xChannel = "BV785 - CD3")
?ggplotEvents
ggplotEvents(myFF, xChannel = "BV785 - CD3", xScale = "logicle")
transList <-
estimateScaleTransforms(ff = OMIP021Samples[[1]],
fluoMethod = "estimateLogical",
scatterMethod = "linear",
scatterRefMarker = "BV785 - CD3")
transList <-
estimateScaleTransforms(ff = OMIP021Samples[[1]],
fluoMethod = "estimateLogicle",
scatterMethod = "linear",
scatterRefMarker = "BV785 - CD3")
transList <-
suppressMessage(estimateScaleTransforms(ff = OMIP021Samples[[1]],
fluoMethod = "estimateLogicle",
scatterMethod = "linear",
scatterRefMarker = "BV785 - CD3"))
transList <-
suppressMessages(estimateScaleTransforms(ff = OMIP021Samples[[1]],
fluoMethod = "estimateLogicle",
scatterMethod = "linear",
scatterRefMarker = "BV785 - CD3"))
refFF <- flowCore::transform(ff_c, refTransList)
thisFF <- flowCore::transform(ff_c, transList)
transList <-
suppressMessages(estimateScaleTransforms(ff = ff_c,
fluoMethod = "estimateLogicle",
scatterMethod = "linear",
scatterRefMarker = "BV785 - CD3"))
refFF <- flowCore::transform(ff_c, refTransList)
thisFF <- flowCore::transform(ff_c, transList)
expect_equal(flowCore::exprs(thisFF),
flowCore::exprs(refFF))
saveRDS(transList, refTransListPath)
refFF <- flowCore::transform(ff_c, refTransList)
thisFF <- flowCore::transform(ff_c, transList)
refFF
thisFF
refTransList <- readRDS(file = refTransListPath)
refFF <- flowCore::transform(ff_c, refTransList)
thisFF <- flowCore::transform(ff_c, transList)
refFF
thisFF
test_that("scale transform processing steps work", {
transList <-
suppressMessages(estimateScaleTransforms(ff = ff_c,
fluoMethod = "estimateLogicle",
scatterMethod = "linear",
scatterRefMarker = "BV785 - CD3"))
#saveRDS(transList, refTransListPath)
refFF <- flowCore::transform(ff_c, refTransList)
thisFF <- flowCore::transform(ff_c, transList)
expect_equal(flowCore::exprs(thisFF),
flowCore::exprs(refFF))
})
fs_raw <-
flowCore::read.flowSet(sampleFiles,
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
res <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = "all",
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
expect_equal(res, fs_raw)
expect_equal(flowCore::exprs(res[[1]]),
flowCore::exprs(fs_raw[[1]]))
res <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = "all",
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
res
fs_raw
fs_raw <- appendCellID(fs_raw)
flowCore::fs_apply(fs_raw, FUN = appendCellID)
flowCore::fsApply(fs_raw, FUN = appendCellID)
fs_raw <- flowCore::fsApply(fs_raw, FUN = appendCellID)
res <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = "all",
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
expect_equal(flowCore::exprs(res[[1]]),
flowCore::exprs(fs_raw[[1]]))
expect_equal(flowCore::exprs(res[[2]]),
flowCore::exprs(fs_raw[[2]]))
res2 <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = 2,
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
ii <- 2
is.integer(ii)
?is.integer
is.numeric(ii)
is.double(ii)
vv <- c(2,3)
vv[1]
vv[1;1]
vv[1.1]
devtools::load_all(".")
res2 <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = 2,
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
expect_equal(res2, fs_raw[[1]])
expect_equal(res2, fs_raw[[2]])
sampleFiles
expect_equal(flowCore::exprs(res2),
flowCOre::exprs(fs_raw[[2]]))
res2 <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = 2,
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
expect_equal(flowCore::exprs(res2),
flowCore::exprs(fs_raw[[2]]))
test_that("readSampleFiles works", {
res <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = "all",
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
expect_equal(flowCore::exprs(res[[1]]),
flowCore::exprs(fs_raw[[1]]))
expect_equal(flowCore::exprs(res[[2]]),
flowCore::exprs(fs_raw[[2]]))
res2 <- readSampleFiles(sampleFiles = sampleFiles,
whichSamples = 2,
truncate_max_range = truncateMaxRange,
min.limit = minLimit)
expect_equal(flowCore::exprs(res2),
flowCore::exprs(fs_raw[[2]]))
})
ref_ff_m <- readRDS(paste0(rdsDir, "ff_m.rds"))
ff_m <-
suppressWarnings(removeMarginsPeacoQC(ff = fs_raw[[1]]))
ff_m <-
suppressWarnings(removeMarginsPeacoQC(x = fs_raw[[1]]))
#saveRDS(ff_m, paste0(rdsDir, "ff_m.rds"))
expect_equal(ff_m, ref_ff_m)
saveRDS(ff_m, paste0(rdsDir, "ff_m.rds"))
ref_ff_m <- readRDS(paste0(rdsDir, "ff_m.rds"))
ff_m <-
suppressWarnings(removeMarginsPeacoQC(x = fs_raw[[1]]))
#saveRDS(ff_m, paste0(rdsDir, "ff_m.rds"))
expect_equal(ff_m, ref_ff_m)
ref_ff_c1 <- readRDS(paste0(rdsDir, "ff_c.rds"))
ref_ff_c <- readRDS(paste0(rdsDir, "ff_c.rds"))
ff_c <-
compensateFromMatrix(ref_ff_m,
matrixSource = "fcs")
#saveRDS(ff_c, paste0(rdsDir, "ff_c.rds"))
expect_equal(ff_c, ref_ff_c)
ref_ff_m <- readRDS(paste0(rdsDir, "ff_m.rds"))
ff_m <-
suppressWarnings(removeMarginsPeacoQC(x = fs_raw[[1]]))
#saveRDS(ff_m, paste0(rdsDir, "ff_m.rds"))
expect_equal(ff_m, ref_ff_m)
ff_c <-
compensateFromMatrix(ref_ff_m,
matrixSource = "fcs")
saveRDS(ff_c, paste0(rdsDir, "ff_c.rds"))
ref_ff_c <- readRDS(paste0(rdsDir, "ff_c.rds"))
#saveRDS(ff_c, paste0(rdsDir, "ff_c.rds"))
expect_equal(ff_c, ref_ff_c)
ff_s <-
removeDoubletsFlowStats(ref_ff_c,
areaChannels = c("FSC-A", "SSC-A"),
heightChannels = c("FSC-H", "SSC-H"),
widerGate = TRUE)
saveRDS(ff_s, paste0(rdsDir, "ff_s.rds"))
ref_ff_s <- readRDS(paste0(rdsDir, "ff_s.rds"))
#saveRDS(ff_s, paste0(rdsDir, "ff_s.rds"))
expect_equal(ff_s, ref_ff_s)
ff_s2 <-
removeDoubletsFlowStats(ref_ff_c,
areaChannels = c("FSC-A", "SSC-A"),
heightChannels = c("FSC-H", "SSC-H"),
nmaps = c(3,5))
saveRDS(ff_s2, paste0(rdsDir, "ff_s2.rds"))
ref_ff_s2 <- readRDS(paste0(rdsDir, "ff_s2.rds"))
#saveRDS(ff_s2, paste0(rdsDir, "ff_s2.rds"))
expect_equal(ff_s2, ref_ff_s2)
ff_cells <-
removeDebrisFlowClustTmix(ref_ff_s,
FSCChannel = "FSC-A",
SSCChannel = "SSC-A",
nClust = 3,
level = 0.97,
B = 100)
saveRDS(ff_cells, paste0(rdsDir, "ff_cells.rds"))
ref_ff_cells <- readRDS(paste0(rdsDir, "ff_cells.rds"))
#saveRDS(ff_cells, paste0(rdsDir, "ff_cells.rds"))
expect_equal(ff_cells, ref_ff_cells)
ff_lcells <-
removeDeadCellsGateTail(ref_ff_cells,
preTransform = TRUE,
transList = refTransList,
LDMarker = "L/D Aqua - Viability",
num_peaks = 2,
ref_peak = 2,
strict = FALSE,
positive = FALSE)
saveRDS(ff_lcells, paste0(rdsDir, "ff_lcells.rds"))
ref_ff_lcells <- readRDS(paste0(rdsDir, "ff_lcells.rds"))
expect_equal(ff_lcells, ref_ff_lcells)
suppressWarnings(ff_QualityControl <-
qualityControlPeacoQC(ref_ff_lcells,
preTransform = TRUE,
transList = refTransList,
min_cells = 150, #default
max_bins = 500, #default
MAD = 6, #default
IT_limit = 0.55, #default
force_IT = 150, #default
peak_removal = (1/3), #default
min_nr_bins_peakdetection = 10 #default
))
saveRDS(ff_QualityControl, paste0(rdsDir, "ff_QC_PeacoQC.rds"))
ref_ff_qualityControl <- readRDS(paste0(rdsDir, "ff_QC_PeacoQC.rds"))
expect_equal(ff_QualityControl, ref_ff_qualityControl)
ff_QualityControl <- suppressWarnings(
qualityControlFlowAI(fs_raw[[1]],
remove_from = "all", # all default
second_fractionFR = 0.1,
deviationFR = "MAD",
alphaFR = 0.01,
decompFR = TRUE,
outlier_binsFS = FALSE,
pen_valueFS = 500,
max_cptFS = 3,
sideFM = "both",
neg_valuesFM = 1))
saveRDS(ff_QualityControl, paste0(rdsDir, "ff_QC_flowAI.rds"))
ref_ff_qualityControl_flowAI <- readRDS(paste0(rdsDir, "ff_QC_flowAI.rds"))
#saveRDS(ff_QualityControl, paste0(rdsDir, "ff_QC_flowAI.rds"))
expect_equal(flowCore::exprs(ff_QualityControl),
flowCore::exprs(ref_ff_qualityControl_flowAI))
#saveRDS(ff_QualityControl, paste0(rdsDir, "ff_QC_PeacoQC.rds"))
expect_equal(ff_QualityControl, ref_ff_qualityControl)
ref_ff_qualityControl <- readRDS(paste0(rdsDir, "ff_QC_PeacoQC.rds"))
test_that("qualityControlPeacoQC", {
suppressWarnings(ff_QualityControl <-
qualityControlPeacoQC(ref_ff_lcells,
preTransform = TRUE,
transList = refTransList,
min_cells = 150, #default
max_bins = 500, #default
MAD = 6, #default
IT_limit = 0.55, #default
force_IT = 150, #default
peak_removal = (1/3), #default
min_nr_bins_peakdetection = 10 #default
))
#saveRDS(ff_QualityControl, paste0(rdsDir, "ff_QC_PeacoQC.rds"))
expect_equal(ff_QualityControl, ref_ff_qualityControl)
})
ref_ff_qualityControl_flowAI <- readRDS(paste0(rdsDir, "ff_QC_flowAI.rds"))
test_that("qualityControlFlowAI works", {
ff_QualityControl <- suppressWarnings(
qualityControlFlowAI(fs_raw[[1]],
remove_from = "all", # all default
second_fractionFR = 0.1,
deviationFR = "MAD",
alphaFR = 0.01,
decompFR = TRUE,
outlier_binsFS = FALSE,
pen_valueFS = 500,
max_cptFS = 3,
sideFM = "both",
neg_valuesFM = 1))
#saveRDS(ff_QualityControl, paste0(rdsDir, "ff_QC_flowAI.rds"))
expect_equal(flowCore::exprs(ff_QualityControl),
flowCore::exprs(ref_ff_qualityControl_flowAI))
})
library(CytoPipeline)
library(CytoPipeline)
?GetChannels
?FlowSOM::GetChannels
?is
?na.omit
?read.csv
?readRDS
?quantile
?is.na
?.hasSlot
devtools::load_all(".")
# flags controlling execution flow of this file
runFullPipelineTests <- TRUE
rawDataDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
rdsDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
experimentName <- "OMIP021_PeacoQC"
sampleFiles <- paste0(rawDataDir, list.files(rawDataDir, pattern = "sample_"))
# main parameters : sample files and output files
pipelineParams <- list()
pipelineParams$experimentName <- experimentName
pipelineParams$sampleFiles <- sampleFiles
test_that("CytoPipeline default creation raises no error", {
expect_error(pipL0 <- CytoPipeline(), NA)
})
test_that("Cytopipeline add/remove/clean processing step works", {
pipL <- CytoPipeline(pipelineParams)
pipL <- addProcessingStep(pipL,
whichQueue = "scale transform",
CytoProcessingStep(
name = "scale_transform_read",
FUN = "readRDS",
ARGS = list(file = paste0(rdsDir,"OMIP021_TransList.rds"))
)
)
expect_equal(getNbProcessingSteps(pipL, "scale transform"), 1)
pipL <- addProcessingStep(pipL,
whichQueue = "scale transform",
CytoProcessingStep(
name = "scale_transform_sum",
FUN = "sum",
ARGS = list()
)
)
expect_equal(getNbProcessingSteps(pipL, "scale transform"), 2)
pipL <- removeProcessingStep(pipL,
whichQueue = "scale transform",
index = 2)
expect_equal(getNbProcessingSteps(pipL, "scale transform"), 1)
pS <- getProcessingStep(pipL, whichQueue = "scale transform", index = 1)
expect_equal(pS@FUN, "readRDS")
pipL <- addProcessingStep(pipL,
whichQueue = "pre-processing",
CytoProcessingStep(
name = "pre-processing_sum",
FUN = "sum",
ARGS = list()
)
)
expect_equal(getNbProcessingSteps(pipL, "scale transform"), 1)
expect_equal(getNbProcessingSteps(pipL, "pre-processing"), 1)
expect_error(pipL <- addProcessingStep(pipL,
whichQueue = "pre-processing",
CytoProcessingStep(
name = "pre-processing_sum",
FUN = "mean",
ARGS = list()
)
), regexp = "There already exist a step")
pipL <- cleanProcessingSteps(pipL)
expect_equal(getNbProcessingSteps(pipL, "scale transform"), 0)
expect_equal(getNbProcessingSteps(pipL, "pre-processing"), 0)
})
test_that("CytoPipeline with reading scale transfo only raises no error", {
expect_error({
pipL <- CytoPipeline(pipelineParams)
pipL <-
addProcessingStep(pipL,
whichQueue = "scale transform",
CytoProcessingStep(
name = "scale_transform_read",
FUN = "readRDS",
ARGS = list(file = paste0(rdsDir,"OMIP021_TransList.rds"))
)
)
suppressWarnings(execute(pipL, rmCache = TRUE))}, NA)
})
devtools::load_all(".")
devtools::load_all(".")
packageDescription("shiny")
tools:::.check_package_license()
tools:::.check_package_license()
tools:::.check_package_license()
?RemoveDoubletsPeacoQC
?RemoveDoubletsFlowStats
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?OMIP021Samples
?diagram::plotmat
?CytoPipeline
devtools::load_all(".")
# flags controlling execution flow of this file
runFullPipelineTests <- TRUE
rawDataDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
rdsDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
experimentName <- "OMIP021_PeacoQC"
sampleFiles <- paste0(rawDataDir, list.files(rawDataDir, pattern = "sample_"))
# main parameters : sample files and output files
pipelineParams <- list()
pipelineParams$experimentName <- experimentName
pipelineParams$sampleFiles <- sampleFiles
pipL5 <- CytoPipeline(experimentName = "DummyExperiment")
sampleFiles(pipL5) <- sampleFiles
devtools::load_all(".")
devtools::load_all(".")
# flags controlling execution flow of this file
runFullPipelineTests <- TRUE
rawDataDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
rdsDir <- paste0(system.file("extdata", package = "CytoPipeline"), "/")
experimentName <- "OMIP021_PeacoQC"
sampleFiles <- paste0(rawDataDir, list.files(rawDataDir, pattern = "sample_"))
# main parameters : sample files and output files
pipelineParams <- list()
pipelineParams$experimentName <- experimentName
pipelineParams$sampleFiles <- sampleFiles
pipL5 <- CytoPipeline(experimentName = "DummyExperiment")
sampleFiles(pipL5) <- sampleFiles
?CytoPipeline
?removeDoubletsPeacoQC
?removeDoubletsFlowStat
?removeDoubletsFlowStats
?removeDoubletsPeacoQC
devtools::load_all(".")
usethis::edit_git_ignore()
?usethis::edit_r_buildignore()
usethis::edit_r_buildignore()
?regexp
dir <- "C:/CBIO/2021-phd-philippe-hauchamps/Analyses/OMIP-021"
