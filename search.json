[{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"install package, start R enter (uncommented): Note CytoPipeline imports ggplot2 (>= 3.4.1). version requirement due bug version 3.4.0., affecting ggplot2::geom_hex().","code":"# if (!require(\"BiocManager\", quietly = TRUE)) #     install.packages(\"BiocManager\") #  # BiocManager::install(\"CytoPipeline\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"CytoPipeline package provides infrastructure support definition, run standardized visualization pre-processing quality control pipelines flow cytometry data. infrastructure consists two main S4 classes, .e. CytoPipeline CytoProcessingStep, well dedicated wrapper functions around selected third-party package methods often used implement pre-processing steps. following sections, demonstrate create CytoPipeline object implementing simple pre-processing pipeline, run retrieve visualize results step.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"example-dataset","dir":"Articles","previous_headings":"","what":"Example dataset","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"example dataset used throughout vignette derived reference public dataset accompanying OMIP-021 (Optimized Multicolor Immunofluorescence Panel 021) article (Gherardin et al. 2014). sub-sample public dataset built-CytoPipeline package, OMIP021 dataset. See MakeOMIP021Samples.R script details OMIP021 dataset created. script found script subdirectory CytoPipeline package installation path. Note CytoPipelinepackage, current vignette, matrices flow cytometry events intensities stored flowCore::flowFrame objects (Ellis B 2022).","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"example-of-pre-processing-and-qc-pipelines","dir":"Articles","previous_headings":"","what":"Example of pre-processing and QC pipelines","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"Let’s assume want pre-process two samples OMIP021 dataset, let’s assume want compare obtain pre-processing files using two different QC methods. first pre-processing pipeline, use flowAI QC method (Monaco et al. 2016), second pipeline, use PeacoQC method (Emmaneel et al. 2021). Note refer QC method, mean algorithm used ensure stability (stationarity) channel signals time. pipelines, first part consists estimating appropriate scale transformation functions channels present sample flowFrame. order , propose following scale transformation processing queue (Fig. 1): reading two samples .fcs files removing margin events file applying compensation file aggregating sub-sampling file estimating scale transformations aggregated sub-sampled data Scale transform processing queue first part done, one can apply pre-processing file one one. However, depending choice QC method, order steps needs slightly different: using flowAI, advised eliminate ‘bad events’ starting raw data (see (Monaco et al. 2016)) using PeacoQC, advised eliminate ‘bad events’ already compensated scale transformed data (see (Emmaneel et al. 2021)) Therefore, propose following pre-processing queues represented Fig. 2. Pre-processing queue two different pipeline settings","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"building-the-cytopipeline","dir":"Articles","previous_headings":"","what":"Building the CytoPipeline","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"CytoPipeline central S4 class used CytoPipeline package represent flow cytometry pre-processing pipeline. main slots CytoPipeline objects : experimentName, gives name particular user definition pre-processing pipeline. experiment , related assay experiment, refers specific way design pipeline. example, current use case, define two experimentNames, one refer flowAI pipeline, another one refer PeacoQC pipeline (see previous section); vector sampleFiles, .fcs raw data files one need run pre-processing pipeline; two processing queues, .e. scaleTransformProcessingQueue, flowFramesPreProcessingQueue, correspond two parts described previous section. queues composed one several CytoProcessingStep objects, processed linear sequence, output one step input next step. Note important differences two processing queues. one hand, scaleTransformProcessingQueue takes vector sample files input, executed first, . hand, flowFramesPreProcessingQueue run scale transformation processing queue, sample file one , within loop. final output scaleTransformProcessingQueue, flowCore::tranformList, also provided input flowFramesPreProcessingQueue, convention. next subsections, show different steps involved creating CytoPipeline object.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"preliminaries-paths-definition","dir":"Articles","previous_headings":"Building the CytoPipeline","what":"preliminaries: paths definition","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"following code, rawDataDir refers directory .fcs raw data files stored. workDir used root directory store disk cache. Indeed, running CytoPipeline objects, different step outputs stored BiocFileCache instance, sub-directory created workDirand name set pipeline experimentName.","code":"library(CytoPipeline)  # raw data rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") # output files workDir <- suppressMessages(base::tempdir())"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"first-method-step-by-step-using-cytopipeline-methods","dir":"Articles","previous_headings":"Building the CytoPipeline","what":"first method: step by step, using CytoPipeline methods","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"sub-section, build CytoPipeline object successively add CytoProcessingStep objects two different processing queues. PeacoQC pipeline.","code":"# main parameters : sample files and output files  experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                                 pattern = \"Donor\"))  pipL_PeacoQC <- CytoPipeline(experimentName = experimentName,                              sampleFiles = sampleFiles)  ### SCALE TRANSFORMATION STEPS ###  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"scale transform\",         CytoProcessingStep(             name = \"flowframe_read\",             FUN = \"readSampleFiles\",             ARGS = list(                 whichSamples = \"all\",                 truncate_max_range = FALSE,                 min.limit = NULL             )         )     )  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"scale transform\",         CytoProcessingStep(             name = \"remove_margins\",             FUN = \"removeMarginsPeacoQC\",             ARGS = list()         )     )  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"scale transform\",         CytoProcessingStep(             name = \"compensate\",             FUN = \"compensateFromMatrix\",             ARGS = list(matrixSource = \"fcs\")         )     )  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"scale transform\",         CytoProcessingStep(             name = \"flowframe_aggregate\",             FUN = \"aggregateAndSample\",             ARGS = list(                 nTotalEvents = 10000,                 seed = 0             )         )     )  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"scale transform\",         CytoProcessingStep(             name = \"scale_transform_estimate\",             FUN = \"estimateScaleTransforms\",             ARGS = list(                 fluoMethod = \"estimateLogicle\",                 scatterMethod = \"linear\",                 scatterRefMarker = \"BV785 - CD3\"             )         )     )  ### FLOW FRAME PRE-PROCESSING STEPS ###  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"flowframe_read\",             FUN = \"readSampleFiles\",             ARGS = list(                 truncate_max_range = FALSE,                 min.limit = NULL             )         )     )   pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"remove_margins\",             FUN = \"removeMarginsPeacoQC\",             ARGS = list()         )     )  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"compensate\",             FUN = \"compensateFromMatrix\",             ARGS = list(matrixSource = \"fcs\")         )     )  pipL_PeacoQC <-     addProcessingStep(         pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"perform_QC\",             FUN = \"qualityControlPeacoQC\",             ARGS = list(                 preTransform = TRUE,                 min_cells = 150, # default                 max_bins = 500, # default                 step = 500, # default,                 MAD = 6, # default                 IT_limit = 0.55, # default                 force_IT = 150, # default                 peak_removal = 0.3333, # default                 min_nr_bins_peakdetection = 10 # default             )         )     )  pipL_PeacoQC <-     addProcessingStep(         pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"remove_doublets\",             FUN = \"removeDoubletsCytoPipeline\",             ARGS = list(                 areaChannels = c(\"FSC-A\", \"SSC-A\"),                 heightChannels = c(\"FSC-H\", \"SSC-H\"),                 nmads = c(3, 5))             )     )                                        pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"remove_debris\",             FUN = \"removeDebrisManualGate\",             ARGS = list(                 FSCChannel = \"FSC-A\",                 SSCChannel = \"SSC-A\",                 gateData =  c(73615, 110174, 213000, 201000, 126000,                               47679, 260500, 260500, 113000, 35000)             )         )     )  pipL_PeacoQC <-     addProcessingStep(pipL_PeacoQC,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"remove_dead_cells\",             FUN = \"removeDeadCellsManualGate\",             ARGS = list(                 FSCChannel = \"FSC-A\",                 LDMarker = \"L/D Aqua - Viability\",                 gateData = c(0, 0, 250000, 250000,                              0, 650, 650, 0)             )         )     )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"second-method-in-one-go-using-json-file-input","dir":"Articles","previous_headings":"Building the CytoPipeline","what":"second method: in one go, using JSON file input","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"sub-section, build flowAI pipeline, time using JSON file input. Note experimentName sampleFiles specified JSON file . necessary, one well specify processing steps JSON file, pass experimentName sampleFiles directly CytoPipeline constructor.","code":"jsonDir <- rawDataDir  # creation on CytoPipeline object, # using json file as input pipL_flowAI <-   CytoPipeline(file.path(jsonDir, \"OMIP021_flowAI_pipeline.json\"),                experimentName = \"OMIP021_flowAI\",                sampleFiles = sampleFiles)"},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"executing-peacoqc-pipeline","dir":"Articles","previous_headings":"Executing pipelines","what":"Executing PeacoQC pipeline","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"Note: executing next statement might generate warnings. generated PeacoQC method, highly dependent shape data investigated, can safely ignored .","code":"# execute PeacoQC pipeline execute(pipL_PeacoQC, path = workDir) ## ##################################################### ## ### running SCALE TRANSFORMATION processing steps ### ## ##################################################### ## Proceeding with step 1 [flowframe_read] ... ## Proceeding with step 2 [remove_margins] ... ## Removing margins from file : Donor1.fcs ## Warning in PeacoQC::RemoveMargins(ff, channels = channel4Margins, ## channel_specifications = PQCChannelSpecs): More than 10.12 % is considered as a ## margin event in file Donor1.fcs . This should be verified. ## Removing margins from file : Donor2.fcs ## Proceeding with step 3 [compensate] ... ## Proceeding with step 4 [flowframe_aggregate] ... ## Warning in aggregateAndSample(new(\"flowSet\", frames = <environment>, phenoData ## = new(\"AnnotatedDataFrame\", : Could not choose as much as 10000 events for ## subsampling, sampled number of events = 9194 ## Proceeding with step 5 [scale_transform_estimate] ... ## ##################################################### ## ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... ## ##################################################### ## Proceeding with step 1 [flowframe_read] ... ## Proceeding with step 2 [remove_margins] ... ## Removing margins from file : Donor1.fcs ## Warning in PeacoQC::RemoveMargins(ff, channels = channel4Margins, ## channel_specifications = PQCChannelSpecs): More than 10.12 % is considered as a ## margin event in file Donor1.fcs . This should be verified. ## Proceeding with step 3 [compensate] ... ## Proceeding with step 4 [perform_QC] ... ## Applying PeacoQC method... ## Starting quality control analysis for Donor1.fcs ## Warning in FindIncreasingDecreasingChannels(breaks, ff, channels, plot, : There ## seems to be an increasing or decreasing trend in a channel for Donor1.fcs . ## Please inspect this in the overview figure. ## Calculating peaks ## Warning in PeacoQC::PeacoQC(ff = ffIn, channels = channel4QualityControl, : ## There are not enough bins for a robust isolation tree analysis. ## MAD analysis removed 38.81% of the measurements ## The algorithm removed 38.81% of the measurements ## Proceeding with step 5 [remove_doublets] ... ## Proceeding with step 6 [remove_debris] ... ## Proceeding with step 7 [remove_dead_cells] ... ## ##################################################### ## ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... ## ##################################################### ## Proceeding with step 1 [flowframe_read] ... ## Proceeding with step 2 [remove_margins] ... ## Removing margins from file : Donor2.fcs ## Proceeding with step 3 [compensate] ... ## Proceeding with step 4 [perform_QC] ... ## Applying PeacoQC method... ## Starting quality control analysis for Donor2.fcs ## Warning in FindIncreasingDecreasingChannels(breaks, ff, channels, plot, : There ## seems to be an increasing or decreasing trend in a channel for Donor2.fcs . ## Please inspect this in the overview figure. ## Calculating peaks ## Warning in PeacoQC::PeacoQC(ff = ffIn, channels = channel4QualityControl, : ## There are not enough bins for a robust isolation tree analysis. ## MAD analysis removed 9.57% of the measurements ## The algorithm removed 9.57% of the measurements ## Proceeding with step 5 [remove_doublets] ... ## Proceeding with step 6 [remove_debris] ... ## Proceeding with step 7 [remove_dead_cells] ..."},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"executing-flowai-pipeline","dir":"Articles","previous_headings":"Executing pipelines","what":"Executing flowAI pipeline","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"Note: might generate warnings, due flowAI. highly dependent shape data investigated, can safely ignored .","code":"# execute flowAI pipeline execute(pipL_flowAI, path = workDir) ## ##################################################### ## ### running SCALE TRANSFORMATION processing steps ### ## ##################################################### ## Proceeding with step 1 [flowframe_read] ... ## Proceeding with step 2 [remove_margins] ... ## Removing margins from file : Donor1.fcs ## Warning in PeacoQC::RemoveMargins(ff, channels = channel4Margins, ## channel_specifications = PQCChannelSpecs): More than 10.12 % is considered as a ## margin event in file Donor1.fcs . This should be verified. ## Removing margins from file : Donor2.fcs ## Proceeding with step 3 [compensate] ... ## Proceeding with step 4 [flowframe_aggregate] ... ## Warning in aggregateAndSample(new(\"flowSet\", frames = <environment>, phenoData ## = new(\"AnnotatedDataFrame\", : Could not choose as much as 10000 events for ## subsampling, sampled number of events = 9194 ## Proceeding with step 5 [scale_transform_estimate] ... ## ##################################################### ## ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... ## ##################################################### ## Proceeding with step 1 [flowframe_read] ... ## Proceeding with step 2 [perform_QC] ... ## Applying flowAI method... ## Quality control for the file: Donor1 ## 5.46% of anomalous cells detected in the flow rate check.  ## 0% of anomalous cells detected in signal acquisition check.  ## 0.12% of anomalous cells detected in the dynamic range check. ## Proceeding with step 3 [compensate] ... ## Proceeding with step 4 [remove_doublets] ... ## Proceeding with step 5 [remove_debris] ... ## Proceeding with step 6 [remove_dead_cells] ... ## ##################################################### ## ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... ## ##################################################### ## Proceeding with step 1 [flowframe_read] ... ## Proceeding with step 2 [perform_QC] ... ## Applying flowAI method... ## Quality control for the file: Donor2 ## 66.42% of anomalous cells detected in the flow rate check.  ## 0% of anomalous cells detected in signal acquisition check.  ## 0.1% of anomalous cells detected in the dynamic range check. ## Proceeding with step 3 [compensate] ... ## Proceeding with step 4 [remove_doublets] ... ## Proceeding with step 5 [remove_debris] ... ## Proceeding with step 6 [remove_dead_cells] ..."},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"plotting-processing-queues-as-workflow-graphs","dir":"Articles","previous_headings":"Inspecting results and visualization","what":"Plotting processing queues as workflow graphs","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"PeacoQC pipeline - scale transformList processing queue PeacoQC pipeline - file pre-processing queue flowAI pipeline - scale transformList processing queue flowAI pipeline - file pre-processing queue","code":"# plot work flow graph - PeacoQC - scale transformList plotCytoPipelineProcessingQueue(   pipL_PeacoQC,   whichQueue = \"scale transform\",   path = workDir) # plot work flow graph - PeacoQC - pre-processing plotCytoPipelineProcessingQueue(   pipL_PeacoQC,   whichQueue = \"pre-processing\",   sampleFile = 1,   path = workDir) # plot work flow graph - flowAI - scale transformList plotCytoPipelineProcessingQueue(   pipL_flowAI,   whichQueue = \"scale transform\",   path = workDir) # plot work flow graph - flowAI - pre-processing  plotCytoPipelineProcessingQueue(   pipL_flowAI,   whichQueue = \"pre-processing\",   sampleFile = 1,   path = workDir)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"obtaining-information-about-pipeline-generated-objects","dir":"Articles","previous_headings":"Inspecting results and visualization","what":"Obtaining information about pipeline generated objects","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"","code":"getCytoPipelineObjectInfos(pipL_PeacoQC,                             path = workDir,                            whichQueue = \"scale transform\") ##                     ObjectName   ObjectClass ## 1           flowframe_read_obj       flowSet ## 2           remove_margins_obj       flowSet ## 3               compensate_obj       flowSet ## 4      flowframe_aggregate_obj     flowFrame ## 5 scale_transform_estimate_obj transformList getCytoPipelineObjectInfos(pipL_PeacoQC,                             path = workDir,                            whichQueue = \"pre-processing\",                            sampleFile = sampleFiles(pipL_PeacoQC)[1]) ##              ObjectName ObjectClass ## 1    flowframe_read_obj   flowFrame ## 2    remove_margins_obj   flowFrame ## 3        compensate_obj   flowFrame ## 4        perform_QC_obj   flowFrame ## 5   remove_doublets_obj   flowFrame ## 6     remove_debris_obj   flowFrame ## 7 remove_dead_cells_obj   flowFrame"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"retrieving-flow-frames-at-different-steps-and-plotting-them","dir":"Articles","previous_headings":"Inspecting results and visualization","what":"Retrieving flow frames at different steps and plotting them","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"1-dimensional distribution plot (forward scatter channel) 2-dimensional distribution plot (forward scatter vs. side scatter channels) 2-dimensional difference plot remove_doublets remove_debris steps","code":"# example of retrieving a flow frame # at a given step ff <- getCytoPipelineFlowFrame(   pipL_PeacoQC,   whichQueue = \"pre-processing\",   sampleFile = 1,   objectName = \"remove_doublets_obj\",   path = workDir)  # ff2 <- getCytoPipelineFlowFrame(   pipL_PeacoQC,   whichQueue = \"pre-processing\",   sampleFile = 1,   objectName = \"remove_debris_obj\",   path = workDir) ggplotEvents(ff, xChannel = \"FSC-A\") ggplotEvents(ff, xChannel = \"FSC-A\", yChannel = \"SSC-A\") ggplotFilterEvents(ff, ff2, xChannel = \"FSC-A\", yChannel = \"SSC-A\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"example-of-retrieving-another-type-of-object","dir":"Articles","previous_headings":"Inspecting results and visualization","what":"Example of retrieving another type of object","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"now provide example retrieve object cache, specifically flowCore::flowFrame. retrieve flowCore::flowSet object, represents set offlowCore::flowFrameobjects, obtained compensation step scale transformation processing queue, prior aggregating two samples.","code":"obj <- getCytoPipelineObjectFromCache(pipL_PeacoQC,                                       path = workDir,                                       whichQueue = \"scale transform\",                                       objectName = \"compensate_obj\") show(obj) ## A flowSet with 2 experiments. ##  ## column names(22): FSC-A FSC-H ... Time Original_ID"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"getting-and-plotting-the-nb-of-retained-events-are-each-step","dir":"Articles","previous_headings":"Inspecting results and visualization","what":"Getting and plotting the nb of retained events are each step","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"Getting number retained events pre-processing step, tracking changes throughout pre-processing steps pipeline different samples useful quality control. can implemented using CytoPipeline collectNbOfRetainedEvents() function. Examples using function quality control plots shown section.","code":"ret <- CytoPipeline::collectNbOfRetainedEvents(     experimentName = \"OMIP021_PeacoQC\",     path = workDir ) ret ##            flowframe_read remove_margins compensate perform_QC remove_doublets ## Donor1.fcs           5000           4494       4494       2750            2189 ## Donor2.fcs           5000           4700       4700       4250            3431 ##            remove_debris remove_dead_cells ## Donor1.fcs          1850              1784 ## Donor2.fcs          3019              2984 retainedProp <-      as.data.frame(t(apply(         ret,         MARGIN = 1,         FUN = function(line) {             if (length(line) == 0 || is.na(line[1])) {                 as.numeric(rep(NA, length(line)))             } else {                 round(line/line[1], 3)             }         }     )))  retainedProp <- retainedProp[-1]  retainedProp ##            remove_margins compensate perform_QC remove_doublets remove_debris ## Donor1.fcs          0.899      0.899       0.55           0.438         0.370 ## Donor2.fcs          0.940      0.940       0.85           0.686         0.604 ##            remove_dead_cells ## Donor1.fcs             0.357 ## Donor2.fcs             0.597 stepRemovedProp <-      as.data.frame(t(apply(         ret,         MARGIN = 1,         FUN = function(line) {             if (length(line) == 0) {                 as.numeric(rep(NA, length(line)))             } else {                 round(1-line/dplyr::lag(line), 3)             }         }     )))  stepRemovedProp <- stepRemovedProp[-1]  stepRemovedProp ##            remove_margins compensate perform_QC remove_doublets remove_debris ## Donor1.fcs          0.101          0      0.388           0.204         0.155 ## Donor2.fcs          0.060          0      0.096           0.193         0.120 ##            remove_dead_cells ## Donor1.fcs             0.036 ## Donor2.fcs             0.012 library(\"reshape2\") library(\"ggplot2\") myGGPlot <- function(DF, title){     stepNames = colnames(DF)     rowNames = rownames(DF)     DFLongFmt <- reshape(DF,                          direction = \"long\",                          v.names = \"proportion\",                          varying = stepNames,                          timevar = \"step\",                          time = stepNames,                          ids = rowNames)          DFLongFmt$step <- factor(DFLongFmt$step, levels = stepNames)               ggplot(data = DFLongFmt,                  mapping = aes(x = step, y = proportion, text = id)) +         geom_point(col = \"blue\") +          ggtitle(title) +         theme(axis.text.x = element_text(angle = 90))      }  p1 <- myGGPlot(DF = retainedProp,                 title = \"Retained event proportion at each step\") p1 p2 <- myGGPlot(DF = stepRemovedProp,                title = \"Event proportion removed by each step\") p2"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"interactive-visualization","dir":"Articles","previous_headings":"Inspecting results and visualization","what":"Interactive visualization","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"Using CytoPipelineGUI package, possible interactively inspect results different steps pipeline, either form flowCore::flowFrame objects, flowCore::transformList. , install CytoPipelineGUI package, uncomment following code:","code":"#devtools::install_github(\"https://github.com/UCLouvain-CBIO/CytoPipelineGUI\") #CytoPipelineGUI::CytoPipelineCheckApp(dir = workDir)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"adding-function-wrappers---note-on-the-cytopipelineutils-package","dir":"Articles","previous_headings":"","what":"Adding function wrappers - note on the CytoPipelineUtils package","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"described previous sections, CytoPipeline requires user provide wrappers pre-processing functions, FUN parameter CytoProcessingSteps. can coded user themself, come built-function provided CytoPipeline . However, order avoid many external dependencies CytoPipeline, another package CytoPipelineUtils, also available CytoPipelineUtils meant used conjunction CytoPipeline package. helper package, aimed hosting wrapper implementations various functions various packages. CytoPipelineUtils open contributions. want implement wrapper favourite pre-processing function use CytoPipeline object, place !","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/CytoPipeline.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Automation and Visualization of Flow Cytometry Data Analysis Pipelines","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] ggplot2_4.0.0      reshape2_1.4.4     CytoPipeline_1.9.4 BiocStyle_2.37.1   ##  ## loaded via a namespace (and not attached): ##   [1] changepoint_2.3       tidyselect_1.2.1      dplyr_1.1.4           ##   [4] farver_2.1.2          blob_1.2.4            filelock_1.0.3        ##   [7] S7_0.2.0              fastmap_1.2.0         BiocFileCache_2.99.6  ##  [10] XML_3.99-0.19         digest_0.6.37         lifecycle_1.0.4       ##  [13] cluster_2.1.8.1       RSQLite_2.4.3         magrittr_2.0.4        ##  [16] compiler_4.5.1        rlang_1.1.6           sass_0.4.10           ##  [19] tools_4.5.1           yaml_2.3.10           data.table_1.17.8     ##  [22] knitr_1.50            labeling_0.4.3        htmlwidgets_1.6.4     ##  [25] bit_4.6.0             curl_7.0.0            diagram_1.6.5         ##  [28] plyr_1.8.9            RColorBrewer_1.1-3    withr_3.0.2           ##  [31] purrr_1.1.0           RProtoBufLib_2.21.0   BiocGenerics_0.55.1   ##  [34] PeacoQC_1.19.0        desc_1.4.3            grid_4.5.1            ##  [37] stats4_4.5.1          flowAI_1.39.0         colorspace_2.1-2      ##  [40] scales_1.4.0          iterators_1.0.14      cli_3.6.5             ##  [43] rmarkdown_2.30        crayon_1.5.3          ragg_1.5.0            ##  [46] ncdfFlow_2.55.0       generics_0.1.4        rjson_0.2.23          ##  [49] DBI_1.2.3             cachem_1.1.0          flowCore_2.21.0       ##  [52] stringr_1.5.2         parallel_4.5.1        BiocManager_1.30.26   ##  [55] matrixStats_1.5.0     vctrs_0.6.5           jsonlite_2.0.0        ##  [58] cytolib_2.21.0        bookdown_0.44         IRanges_2.43.4        ##  [61] GetoptLong_1.0.5      S4Vectors_0.47.4      bit64_4.6.0-1         ##  [64] clue_0.3-66           Rgraphviz_2.53.0      systemfonts_1.3.1     ##  [67] foreach_1.5.2         jquerylib_0.1.4       hexbin_1.28.5         ##  [70] glue_1.8.0            pkgdown_2.1.3.9000    codetools_0.2-20      ##  [73] stringi_1.8.7         shape_1.4.6.1         gtable_0.3.6          ##  [76] ggcyto_1.37.1         ComplexHeatmap_2.25.2 tibble_3.3.0          ##  [79] pillar_1.11.1         rappdirs_0.3.3        htmltools_0.5.8.1     ##  [82] graph_1.87.0          circlize_0.4.16       R6_2.6.1              ##  [85] dbplyr_2.5.1          httr2_1.2.1           textshaping_1.0.3     ##  [88] doParallel_1.0.17     evaluate_1.0.5        flowWorkspace_4.21.0  ##  [91] lattice_0.22-7        Biobase_2.69.1        png_0.1-8             ##  [94] memoise_2.0.1         bslib_0.9.0           Rcpp_1.1.0            ##  [97] gridExtra_2.3         xfun_0.53             zoo_1.8-14            ## [100] fs_1.6.6              pkgconfig_2.0.3       GlobalOptions_0.1.2"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/articles/Demo.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Demonstration of the CytoPipeline R package suite functionalities","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] BiocStyle_2.37.1 ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] bookdown_0.44       fastmap_1.2.0       xfun_0.53           ##  [7] cachem_1.1.0        knitr_1.50          htmltools_0.5.8.1   ## [10] rmarkdown_2.30      lifecycle_1.0.4     cli_3.6.5           ## [13] sass_0.4.10         pkgdown_2.1.3.9000  textshaping_1.0.3   ## [16] jquerylib_0.1.4     systemfonts_1.3.1   compiler_4.5.1      ## [19] tools_4.5.1         ragg_1.5.0          bslib_0.9.0         ## [22] evaluate_1.0.5      yaml_2.3.10         BiocManager_1.30.26 ## [25] jsonlite_2.0.0      rlang_1.1.6         fs_1.6.6            ## [28] htmlwidgets_1.6.4"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Hauchamps. Author, maintainer. Laurent Gatto. Author. Dan Lin. Contributor.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hauchamps P, Bayat B, Delandre S, Hamrouni M, Toussaint M, Temmerman S, Lin D, Gatto L (2024). “CytoPipeline CytoPipelineGUI: Bioconductor R package suite building visualizing automated pre-processing pipelines flow cytometry data.” BMC Bioinformatics, 25(1), 80. doi:10.1186/s12859-024-05691-z.","code":"@Article{,   title = {{CytoPipeline} and {CytoPipelineGUI}: a Bioconductor {R} package               suite for building and visualizing automated pre-processing               pipelines for flow cytometry data},   author = {Philippe Hauchamps and Babak Bayat and Simon Delandre and Mehdi Hamrouni and Marie Toussaint and Stephane Temmerman and Dan Lin and Laurent Gatto},   journal = {BMC Bioinformatics},   year = {2024},   volume = {25},   number = {1},   pages = {80},   doi = {10.1186/s12859-024-05691-z}, }"},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/index.html","id":"what-is-cytopipeline","dir":"","previous_headings":"Automation and visualization of flow cytometry data analysis pipelines","what":"What is CytoPipeline?","title":"Automation and visualization of flow cytometry data analysis pipelines","text":"CytoPipeline package provides support automation visualization flow cytometry data analysis pipelines. current state, package focuses preprocessing quality control part. framework based two main S4 classes, .e. CytoPipeline CytoProcessingStep. CytoProcessingStep defines link pipeline step names corresponding R functions either provided CytoPipeline package , exported third party package, coded user /. processing steps need specified centrally explicitly using either json input file step step creation CytoPipeline object dedicated methods. run pipeline, obtained results steps can retrieved visualized thanks file caching (running facility uses BiocFileCache implementation). package provides also specific visualization tools like pipeline workflow summary display, 1D/2D comparison plots obtained flowFrames various steps pipeline.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/index.html","id":"license","dir":"","previous_headings":"Automation and visualization of flow cytometry data analysis pipelines","what":"License","title":"Automation and visualization of flow cytometry data analysis pipelines","text":"CytoPipeline code provided GPL license version 3.0 higher. documentation, including manual pages vignettes, distributed CC -SA 4.0 license.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/index.html","id":"citation","dir":"","previous_headings":"Automation and visualization of flow cytometry data analysis pipelines","what":"Citation","title":"Automation and visualization of flow cytometry data analysis pipelines","text":"use Cytopipeline research, please use following citation: Hauchamps P, Bayat B, Delandre S, Hamrouni M, Toussaint M, Temmerman S, Lin D, Gatto L (2024). “CytoPipeline CytoPipelineGUI: Bioconductor R package suite building visualizing automated pre-processing pipelines flow cytometry data.” BMC Bioinformatics, 25(1), 80. doi:10.1186/s12859-024-05691-z https://doi.org/10.1186/s12859-024-05691-z. run citation(\"CytoPipeline\") get bibtex entry.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"CytoPipeline package — CytoPipeline","title":"CytoPipeline package — CytoPipeline","text":"CytoPipeline package provides support automation visualization flow cytometry data analysis pipelines. current state, package focuses preprocessing quality control part. framework based two main S4 classes, .e. CytoPipeline CytoProcessingStep. CytoProcessingStep defines link pipeline step names corresponding R functions either provided CytoPipeline package , exported third party package, coded user /. processing steps need specified centrally explicitly using either json input file step step creation CytoPipeline object dedicated methods. run pipeline, obtained results steps can retrieved visualized thanks file caching (running facility uses BiocFileCache implementation). package provides also specific visualization tools like pipeline workflow summary display, 1D/2D comparison plots obtained flowFrames various steps pipeline. step step example using CytoPipeline, please look vignette!","code":""},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipeline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CytoPipeline package — CytoPipeline","text":"Maintainer: Philippe Hauchamps philippe.hauchamps@uclouvain.(ORCID) Authors: Laurent Gatto laurent.gatto@uclouvain.(ORCID) contributors: Dan Lin dan.8.lin@gsk.com [contributor]","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipelineClass.html","id":null,"dir":"Reference","previous_headings":"","what":"CytoPipeline class — CytoPipeline-class","title":"CytoPipeline class — CytoPipeline-class","text":"Class representing flow cytometry pipeline, composed two processing queues, .e. lists CytoProcessingStep objects : list CytoProcessingStep(s) pre-calculation scale transformations per channel list CytoProcessingStep(s) pre-processing flow frames","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipelineClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CytoPipeline class — CytoPipeline-class","text":"","code":"# S4 method for class 'CytoPipeline' show(object)  # S4 method for class 'missing' CytoPipeline(   object,   experimentName = \"default_experiment\",   sampleFiles = character(),   pData = NULL )  # S4 method for class 'list' CytoPipeline(   object,   experimentName = \"default_experiment\",   sampleFiles = character(),   pData = NULL )  # S4 method for class 'character' CytoPipeline(   object,   experimentName = \"default_experiment\",   sampleFiles = character(),   pData = NULL )  # S3 method for class 'CytoPipeline' as.list(x, ...)  experimentName(x)  experimentName(x) <- value  sampleFiles(x)  sampleFiles(x) <- value  pData(x)  pData(x) <- value  sampleDisplayNames(x, sampleFiles = NULL)  sampleNameFromDisplayName(x, displayName)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipelineClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CytoPipeline class — CytoPipeline-class","text":"object character() containing JSON input experimentName experiment name sampleFiles character (e.g. sampleFileNames) numeric vector (e.g. indices sample files). NULL, samples displayed. pData pheno Data (data.frame NULL) x CytoPipeline object ... additional arguments (used ) value new value assigned. pData<- setter bit liberal used : can accept new pData containing rows existing sample names (corresponding subset pData taken). can accept pData row names pointing either sample file full paths base file names can accept pData row names provided number rows correspond number sample files. Row names set default sample file base names (unique), sample file full paths. displayName character","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipelineClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CytoPipeline class — CytoPipeline-class","text":"nothing .list.CytoPipeline: obtained list sampleDisplayNames: character vector sample display names sampleNameFromDisplayName: sample name corresponding specified display name. sample display names","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipelineClass.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CytoPipeline class — CytoPipeline-class","text":"scaleTransformProcessingQueue list CytoProcessingStep objects containing steps obtaining scale transformations per channel flowFramesPreProcessingQueue list CytoProcessingStep objects containing steps pre-processing samples flow frames experimentName character containing experiment (run) name sampleFiles character vector storing fcs files run pipeline pData optional data.frame containing additional information sample file. pData raw names correspond sample files (using full paths base paths). pData contains columns name 'displayName', impact sampleDisplayNames() function, .e. sample display names one mentioned pData, instead typically base file names (larger paths base file names unique)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoPipelineClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CytoPipeline class — CytoPipeline-class","text":"","code":"### *** EXAMPLE 1: building CytoPipeline step by step *** ###  rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                              pattern = \"Donor\"))                                               outputDir <- base::tempdir()  # main parameters : sample files and output files pipL <- CytoPipeline(experimentName = experimentName,                      sampleFiles = sampleFiles)  ### SCALE TRANSFORMATION STEPS ###  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"flowframe_read\",                           FUN = \"readSampleFiles\",                           ARGS = list(                               whichSamples = \"all\",                               truncate_max_range = FALSE,                               min.limit = NULL                           )                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"remove_margins\",                           FUN = \"removeMarginsPeacoQC\",                           ARGS = list()                      )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"compensate\",                           FUN = \"compensateFromMatrix\",                           ARGS = list(matrixSource = \"fcs\")                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"flowframe_aggregate\",                           FUN = \"aggregateAndSample\",                           ARGS = list(                               nTotalEvents = 10000,                               seed = 0                           )                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"scale_transform_estimate\",                           FUN = \"estimateScaleTransforms\",                           ARGS = list(                               fluoMethod = \"estimateLogicle\",                               scatterMethod = \"linear\",                               scatterRefMarker = \"BV785 - CD3\"                           )                       )     )  ### PRE-PROCESSING STEPS ###  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"flowframe_read\",                           FUN = \"readSampleFiles\",                           ARGS = list(                               truncate_max_range = FALSE,                               min.limit = NULL                           )                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"remove_margins\",                           FUN = \"removeMarginsPeacoQC\",                           ARGS = list()                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"compensate\",                           FUN = \"compensateFromMatrix\",                           ARGS = list(matrixSource = \"fcs\")                       )     )  pipL <-     addProcessingStep(         pipL,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"remove_debris\",             FUN = \"removeDebrisManualGate\",             ARGS = list(                 FSCChannel = \"FSC-A\",                 SSCChannel = \"SSC-A\",                 gateData =  c(73615, 110174, 213000, 201000, 126000,                               47679, 260500, 260500, 113000, 35000)))     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"remove_dead_cells\",                           FUN = \"removeDeadCellsManualGate\",                           ARGS = list(                               FSCChannel = \"FSC-A\",                               LDMarker = \"L/D Aqua - Viability\",                               gateData = c(0, 0, 250000, 250000,                                            0, 650, 650, 0)                           )                       )     )  pipL <-     addProcessingStep(         pipL,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"perform_QC\",             FUN = \"qualityControlPeacoQC\",             ARGS = list(                 preTransform = TRUE,                 min_cells = 150, # default                 max_bins = 500, # default                 step = 500, # default,                 MAD = 6, # default                 IT_limit = 0.55, # default                 force_IT = 150, # default                 peak_removal = 0.3333, # default                 min_nr_bins_peakdetection = 10 # default             )         )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"transform\",                           FUN = \"applyScaleTransforms\",                           ARGS = list()                       )     )  ### *** EXAMPLE 2: building CytoPipeline from JSON file *** ###  jsonDir <- system.file(\"extdata\", package = \"CytoPipeline\") jsonPath <- file.path(jsonDir, \"pipelineParams.json\")  pipL2 <- CytoPipeline(jsonPath,                       experimentName = experimentName,                       sampleFiles = sampleFiles)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoProcessingStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Cyto Processing step — CytoProcessingStep","title":"Cyto Processing step — CytoProcessingStep","text":"Class containing function arguments applied lazy-execution framework. Objects class created using CytoProcessingStep() function. processing step executed executeProcessingStep() function.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoProcessingStep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cyto Processing step — CytoProcessingStep","text":"","code":"CytoProcessingStep(name = character(), FUN = character(), ARGS = list())  # S4 method for class 'CytoProcessingStep' show(object)  executeProcessingStep(x, ...)  getCPSName(x)  getCPSFUN(x)  getCPSARGS(x)  # S3 method for class 'CytoProcessingStep' as.list(x, ...)  as.json.CytoProcessingStep(x, pretty = FALSE)  from.json.CytoProcessingStep(jsonString)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoProcessingStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cyto Processing step — CytoProcessingStep","text":"name character denoting name step, can different function name FUN function character representing function name. ARGS list arguments passed along FUN. object CytoProcessingStep object. x CytoProcessingStep object. ... arguments (used) pretty formatting set-(see jsonlite::toJSON doc) jsonString character() containing JSON string.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoProcessingStep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cyto Processing step — CytoProcessingStep","text":"CytoProcessingStep function returns object type CytoProcessingStep.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoProcessingStep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cyto Processing step — CytoProcessingStep","text":"object contains relevant information data analysis processing step, .e. function arguments applied data.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/CytoProcessingStep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cyto Processing step — CytoProcessingStep","text":"","code":"## Create a simple processing step object ps1 <- CytoProcessingStep(\"summing step\", sum)  getCPSName(ps1) #> [1] \"summing step\"  getCPSFUN(ps1) #> function (..., na.rm = FALSE)  .Primitive(\"sum\")  getCPSARGS(ps1) #> list()  executeProcessingStep(ps1, 1:10) #> [1] 55  as.list(ps1) #> $name #> [1] \"summing step\" #>  #> $FUN #> [1] \"sum\" #>  #> $ARGS #> list() #>   js_str <- as.json.CytoProcessingStep(ps1)  ps2 <- from.json.CytoProcessingStep(js_str)  identical(ps1, ps2) #> [1] FALSE"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/OMIP021Samples.html","id":null,"dir":"Reference","previous_headings":"","what":"OMIP021Samples dataset — OMIP021Samples","title":"OMIP021Samples dataset — OMIP021Samples","text":"OMIP021Samples dataset","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/OMIP021Samples.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OMIP021Samples dataset — OMIP021Samples","text":"flowCore::flowSet two different flowFrames one contains one flow cytometry sample corresponding Donor1.fcs Donor2.fcs following source. subsampling 5,000 events performed file.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/OMIP021Samples.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"OMIP021Samples dataset — OMIP021Samples","text":"https://flowrepository.org/experiments/305","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/OMIP021Samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OMIP021Samples dataset — OMIP021Samples","text":"nothing","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/aggregateAndSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate and sample multiple flow frames of a flow set together — aggregateAndSample","title":"Aggregate and sample multiple flow frames of a flow set together — aggregateAndSample","text":"Aggregate multiple flow frames order analyze simultaneously. new FF, contains nTotalEvents cells, nTotalEvents/nFiles cells file. Two new columns added: column indicating original file index, noisy version , better plotting opportunities, function based PeacoQC::AggregateFlowframes() file names inputs replaced flowSet input.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/aggregateAndSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate and sample multiple flow frames of a flow set together — aggregateAndSample","text":"","code":"aggregateAndSample(   fs,   nTotalEvents,   setup = c(\"forceNEvent\", \"forceBalance\"),   seed = NULL,   channels = NULL,   writeOutput = FALSE,   outputFile = \"aggregate.fcs\",   keepOrder = FALSE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/aggregateAndSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate and sample multiple flow frames of a flow set together — aggregateAndSample","text":"fs flowCore::flowset nTotalEvents Total number cells select input flow frames setup proceed nTotalEvents/nFiles high flow frames: forceBalance (default): compute minimum nb events per flow frame, keep amount events flow frame. forceNEvents: try balanced possible, force total nTotalEvents possible, .e. takes events flow frame low nb events, fill total events bigger flow frames balanced way. However, nTotalEvents greater sum events, take events . seed seed set sampling reproducibility. Default NULL set seed. channels Channels/markers keep aggregate. Default NULL takes channels first file. writeOutput Whether write resulting flowframe file. Default FALSE outputFile Full path output file. Default \"aggregate.fcs\" keepOrder TRUE, random subsample ordered way originally ordered file. Default = FALSE.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/aggregateAndSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate and sample multiple flow frames of a flow set together — aggregateAndSample","text":"returns new flowCore::flowFrame","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/aggregateAndSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate and sample multiple flow frames of a flow set together — aggregateAndSample","text":"","code":"data(OMIP021Samples)  nCells <- 1000 agg <- aggregateAndSample(     fs = OMIP021Samples,     nTotalEvents = nCells)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/appendCellID.html","id":null,"dir":"Reference","previous_headings":"","what":"append 'Original_ID' column to a flowframe — appendCellID","title":"append 'Original_ID' column to a flowframe — appendCellID","text":": flowCore::flowFrame, append 'Original_ID' column. column can used plots comparing events pre post gating. 'Original_ID' column already exists, function nothing","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/appendCellID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"append 'Original_ID' column to a flowframe — appendCellID","text":"","code":"appendCellID(ff, eventIDs = seq_len(flowCore::nrow(ff)))"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/appendCellID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"append 'Original_ID' column to a flowframe — appendCellID","text":"ff flowCore::flowFrame eventIDs integer vector containing values added expression matrix, Original ID's.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/appendCellID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"append 'Original_ID' column to a flowframe — appendCellID","text":"new flowCore::flowFrame containing added 'Original_ID' column","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/appendCellID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"append 'Original_ID' column to a flowframe — appendCellID","text":"","code":"data(OMIP021Samples)  retFF <- appendCellID(OMIP021Samples[[1]])"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/applyScaleTransforms.html","id":null,"dir":"Reference","previous_headings":"","what":"apply scale transforms — applyScaleTransforms","title":"apply scale transforms — applyScaleTransforms","text":"wrapper around flowCore::transform() discards additional parameter passed (...) Additionally, checks regarding channels correspondance done: transList contains transformations channels present x, transformations first removed.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/applyScaleTransforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply scale transforms — applyScaleTransforms","text":"","code":"applyScaleTransforms(x, transList, verbose = FALSE, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/applyScaleTransforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply scale transforms — applyScaleTransforms","text":"x flowCore::flowSet flowCore::flowFrame transList flowCore::transformList verbose TRUE, send message per flowFrame transformed ... arguments (used)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/applyScaleTransforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply scale transforms — applyScaleTransforms","text":"transformed flowFrame","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/applyScaleTransforms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply scale transforms — applyScaleTransforms","text":"","code":"data(OMIP021Samples)  transListPath <- file.path(system.file(\"extdata\",                                         package = \"CytoPipeline\"),                            \"OMIP021_TransList.rds\")   transList <- readRDSObject(transListPath)  ff_c <- compensateFromMatrix(OMIP021Samples[[1]],                              matrixSource = \"fcs\")    ff_t <- applyScaleTransforms(ff_c, transList = transList)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areFluoCols.html","id":null,"dir":"Reference","previous_headings":"","what":"find flow frame columns that represent fluorochrome channel — areFluoCols","title":"find flow frame columns that represent fluorochrome channel — areFluoCols","text":": find flow frame columns represent fluorochrome channel","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areFluoCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find flow frame columns that represent fluorochrome channel — areFluoCols","text":"","code":"areFluoCols(   x,   toRemovePatterns = c(\"FSC\", \"SSC\", \"Time\", \"Original_ID\", \"File\", \"SampleID\") )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areFluoCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find flow frame columns that represent fluorochrome channel — areFluoCols","text":"x flowCore::flowFrame flowCore::flowSet toRemovePatterns vector string patterns considered non fluorochrome","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areFluoCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find flow frame columns that represent fluorochrome channel — areFluoCols","text":"vector booleans dimension equal number columns ff","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areFluoCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find flow frame columns that represent fluorochrome channel — areFluoCols","text":"","code":"data(OMIP021Samples)  areFluoCols(OMIP021Samples) #>          FSC-A          FSC-H          SSC-A          SSC-H 450/50Violet-A  #>          FALSE          FALSE          FALSE          FALSE           TRUE  #> 525/50Violet-A 540/30Violet-A 585/15Violet-A 610/20Violet-A 670/30Violet-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>    670/14Red-A   730//45Red-A    780/60Red-A   530/30Blue-A   710/50Blue-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> 582/15Yellow-A 610/20Yellow-A 670/30Yellow-A 710/50Yellow-A 780/60Yellow-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>           Time    Original_ID  #>          FALSE          FALSE"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areSignalCols.html","id":null,"dir":"Reference","previous_headings":"","what":"find flow frame columns that represent true signal — areSignalCols","title":"find flow frame columns that represent true signal — areSignalCols","text":": find flow frame columns represent true signal","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areSignalCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find flow frame columns that represent true signal — areSignalCols","text":"","code":"areSignalCols(   x,   toRemovePatterns = c(\"Time\", \"Original_ID\", \"File\", \"SampleID\") )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areSignalCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find flow frame columns that represent true signal — areSignalCols","text":"x flowCore::flowFrame flowCore::flowSet toRemovePatterns vector string patterns considered non signal","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areSignalCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find flow frame columns that represent true signal — areSignalCols","text":"vector booleans dimension equal number columns ff","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/areSignalCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find flow frame columns that represent true signal — areSignalCols","text":"","code":"data(OMIP021Samples)  areSignalCols(OMIP021Samples) #>          FSC-A          FSC-H          SSC-A          SSC-H 450/50Violet-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> 525/50Violet-A 540/30Violet-A 585/15Violet-A 610/20Violet-A 670/30Violet-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>    670/14Red-A   730//45Red-A    780/60Red-A   530/30Blue-A   710/50Blue-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> 582/15Yellow-A 610/20Yellow-A 670/30Yellow-A 710/50Yellow-A 780/60Yellow-A  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #>           Time    Original_ID  #>          FALSE          FALSE"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/compensateFromMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"compensation of fcs file(s) from matrix — compensateFromMatrix","title":"compensation of fcs file(s) from matrix — compensateFromMatrix","text":"executes classical compensation function flowSet flowFrame, given compensation matrix. matrix can either retrieved fcs files provided csv file.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/compensateFromMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compensation of fcs file(s) from matrix — compensateFromMatrix","text":"","code":"compensateFromMatrix(   x,   matrixSource = c(\"fcs\", \"import\"),   matrixPath = NULL,   updateChannelNames = TRUE,   verbose = FALSE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/compensateFromMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compensation of fcs file(s) from matrix — compensateFromMatrix","text":"x flowCore::flowFrame flowCore::flowSet matrixSource \"fcs\", compensation matrix fetched fcs files (different compensation matrices can applied fcs file) \"import\", uses matrixPath read matrix (csv file) matrixPath matrixSource == \"import\", used input csv file path updateChannelNames TRUE, updates fluo channel names prefixing \"comp-\" verbose TRUE, displays information messages ... additional arguments (used)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/compensateFromMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compensation of fcs file(s) from matrix — compensateFromMatrix","text":"compensated flowSet flowFrame","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/compensateFromMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compensation of fcs file(s) from matrix — compensateFromMatrix","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/computeScatterChannelsLinearScale.html","id":null,"dir":"Reference","previous_headings":"","what":"compute linear transformation of scatter channels found in ff, based on 5% and 95% of referenceChannel, set as target. If there is a transformation defined in transList for referenceChannel, it is applied first, before computing quantiles. Then the computed linear transformations (or each scatter channel) are added into the transfo_list. -A channels are computed, and same linear transformation is then applied to corresponding -W and -H channels (if they exist in ff). — computeScatterChannelsLinearScale","title":"compute linear transformation of scatter channels found in ff, based on 5% and 95% of referenceChannel, set as target. If there is a transformation defined in transList for referenceChannel, it is applied first, before computing quantiles. Then the computed linear transformations (or each scatter channel) are added into the transfo_list. -A channels are computed, and same linear transformation is then applied to corresponding -W and -H channels (if they exist in ff). — computeScatterChannelsLinearScale","text":"based referenceChannel","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/computeScatterChannelsLinearScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute linear transformation of scatter channels found in ff, based on 5% and 95% of referenceChannel, set as target. If there is a transformation defined in transList for referenceChannel, it is applied first, before computing quantiles. Then the computed linear transformations (or each scatter channel) are added into the transfo_list. -A channels are computed, and same linear transformation is then applied to corresponding -W and -H channels (if they exist in ff). — computeScatterChannelsLinearScale","text":"","code":"computeScatterChannelsLinearScale(   ff,   transList = NULL,   referenceChannel,   silent = TRUE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/computeScatterChannelsLinearScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute linear transformation of scatter channels found in ff, based on 5% and 95% of referenceChannel, set as target. If there is a transformation defined in transList for referenceChannel, it is applied first, before computing quantiles. Then the computed linear transformations (or each scatter channel) are added into the transfo_list. -A channels are computed, and same linear transformation is then applied to corresponding -W and -H channels (if they exist in ff). — computeScatterChannelsLinearScale","text":"ff flowCore::flowFrame transList initial flowCore::transformList referenceChannel reference channel take target quantile values . Can defined marker channel name. silent FALSE, output information computed linear transformations","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/computeScatterChannelsLinearScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute linear transformation of scatter channels found in ff, based on 5% and 95% of referenceChannel, set as target. If there is a transformation defined in transList for referenceChannel, it is applied first, before computing quantiles. Then the computed linear transformations (or each scatter channel) are added into the transfo_list. -A channels are computed, and same linear transformation is then applied to corresponding -W and -H channels (if they exist in ff). — computeScatterChannelsLinearScale","text":"transList added linear scale transformations","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/computeScatterChannelsLinearScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute linear transformation of scatter channels found in ff, based on 5% and 95% of referenceChannel, set as target. If there is a transformation defined in transList for referenceChannel, it is applied first, before computing quantiles. Then the computed linear transformations (or each scatter channel) are added into the transfo_list. -A channels are computed, and same linear transformation is then applied to corresponding -W and -H channels (if they exist in ff). — computeScatterChannelsLinearScale","text":"","code":"data(OMIP021Samples)  ff <- OMIP021Samples[[1]] refMarker <- \"APCCy7 - CD4\" refChannel <- \"780/60Red-A\" transList <- flowCore::estimateLogicle(ff,                                        channels = refChannel) retTransList <-     computeScatterChannelsLinearScale(ff,                                       transList = transList,                                       referenceChannel = refMarker,                                       silent = TRUE     )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/estimateScaleTransforms.html","id":null,"dir":"Reference","previous_headings":"","what":"estimates scale tranformations — estimateScaleTransforms","title":"estimates scale tranformations — estimateScaleTransforms","text":"function estimates scale transformations applied flowFrame obtain 'good behaving' distributions, .e. best possible separation + population - population. distinguishes scatter channels, either linear, transform applied, fluo channels, either logicle transform using flowCore::estimateLogicle - estimated, transform applied. idea linear transform scatter channels follows: reference channel (scatter one) selected linear transform (Y = AX + B) applied scatter channel, align 5 95 percentiles reference channel estimateLogicle function, see flowCore documentation.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/estimateScaleTransforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estimates scale tranformations — estimateScaleTransforms","text":"","code":"estimateScaleTransforms(   ff,   fluoMethod = c(\"estimateLogicle\", \"none\"),   scatterMethod = c(\"none\", \"linearQuantile\"),   scatterRefMarker = NULL,   specificScatterChannels = NULL,   verbose = FALSE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/estimateScaleTransforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estimates scale tranformations — estimateScaleTransforms","text":"ff flowCore::flowFrame fluoMethod method applied fluo channels scatterMethod method applied scatter channels scatterRefMarker reference channel used align specificScatterChannels vector scatter channels still want apply fluo method (scatter Method) verbose TRUE, send messages user step","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/estimateScaleTransforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"estimates scale tranformations — estimateScaleTransforms","text":"flowCore::flowFrame removed low quality events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/estimateScaleTransforms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"estimates scale tranformations — estimateScaleTransforms","text":"","code":"data(OMIP021Samples)  compMatrix <- flowCore::spillover(OMIP021Samples[[1]])$SPILL ff_c <- runCompensation(OMIP021Samples[[1]], spillover = compMatrix)  transList <-      estimateScaleTransforms(                 ff = ff_c,         fluoMethod = \"estimateLogicle\",         scatterMethod = \"linear\",         scatterRefMarker = \"BV785 - CD3\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/execute.html","id":null,"dir":"Reference","previous_headings":"","what":"executing CytoPipeline object — execute","title":"executing CytoPipeline object — execute","text":"function triggers execution processing queues CytoPipeline object. First, scale tranform processing queue run, taking set sample names implicit first input. end queue, scale transform List assumed created. Second, flowFrame pre-processing queue, reapeatedly sample file. scale transform list generated previous step taken implicit input, together initial sample file. end queue run, pre-processed flowFrame assumed generated. change made input CytoPipeline object, results stored cache.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"executing CytoPipeline object — execute","text":"","code":"execute(   x,   path = \".\",   rmCache = FALSE,   useBiocParallel = FALSE,   BPPARAM = BiocParallel::bpparam(),   BPOPTIONS = BiocParallel::bpoptions(packages = c(\"flowCore\")),   saveLastStepFF = TRUE,   saveFFSuffix = \"_preprocessed\",   saveFFFormat = c(\"fcs\", \"csv\"),   saveFFCsvUseChannelMarker = TRUE,   saveScaleTransforms = FALSE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"executing CytoPipeline object — execute","text":"x CytoPipeline object path base path, subdirectory name equal experiment created store output data, particular experiment cache rmCache TRUE, starts removing already existing cache directory corresponding experiment useBiocParallel TRUE, use BiocParallel computation sample file pre-processing parallel (one file per worker time). Note BiocParallel function used bplapply() BPPARAM useBiocParallel TRUE, sets BPPARAM back-end used computation. provided, use top back-end BiocParallel::registered() stack. BPOPTIONS useBiocParallel TRUE, sets BPOPTIONS passed bplapply() function. Note use SnowParams back-end, need specify packages need loaded different CytoProcessingStep work properly (visibility functions). minimum, flowCore package needs loaded. (hence default BPOPTIONS = bpoptions(packages = c(\"flowCore\")) ) saveLastStepFF TRUE, save final result pre-processing, file. convention, output files stored path/x@experimentName/output/, file names used initial fcs file basenames, concatenated saveFFSuffix, file extension corresponding saveFFFormat. saveFFSuffix FF file name suffix saveFFFormat either fcs csv saveFFCsvUseChannelMarker TRUE (default), converts channels corresponding marker names (Marker NA). setting applicable export csv format. saveScaleTransforms TRUE (default FALSE), save disk (RDS format) flowCore::transformList object obtained running scaleTransform processing queue. file name hardcoded path/experimentName/RDS/scaleTransformList.rds","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"executing CytoPipeline object — execute","text":"nothing","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/execute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"executing CytoPipeline object — execute","text":"","code":"### *** EXAMPLE 1: building CytoPipeline step by step *** ###  rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                              pattern = \"Donor\"))                                               outputDir <- base::tempdir()  # main parameters : sample files and output files pipelineParams <- list() pipelineParams$experimentName <- experimentName pipelineParams$sampleFiles <- sampleFiles pipL <- CytoPipeline(pipelineParams)  ### SCALE TRANSFORMATION STEPS ###  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"flowframe_read\",                           FUN = \"readSampleFiles\",                           ARGS = list(                               whichSamples = \"all\",                               truncate_max_range = FALSE,                               min.limit = NULL                           )                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"remove_margins\",                           FUN = \"removeMarginsPeacoQC\",                           ARGS = list()                      )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"compensate\",                           FUN = \"compensateFromMatrix\",                           ARGS = list(matrixSource = \"fcs\")                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"flowframe_aggregate\",                           FUN = \"aggregateAndSample\",                           ARGS = list(                               nTotalEvents = 10000,                               seed = 0                           )                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"scale transform\",                       CytoProcessingStep(                           name = \"scale_transform_estimate\",                           FUN = \"estimateScaleTransforms\",                           ARGS = list(                               fluoMethod = \"estimateLogicle\",                               scatterMethod = \"linear\",                               scatterRefMarker = \"BV785 - CD3\"                           )                       )     )  ### PRE-PROCESSING STEPS ###  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"flowframe_read\",                           FUN = \"readSampleFiles\",                           ARGS = list(                               truncate_max_range = FALSE,                               min.limit = NULL                           )                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"remove_margins\",                           FUN = \"removeMarginsPeacoQC\",                           ARGS = list()                       )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"compensate\",                           FUN = \"compensateFromMatrix\",                           ARGS = list(matrixSource = \"fcs\")                       )     )  pipL <- addProcessingStep(     pipL,     whichQueue = \"pre-processing\",     CytoProcessingStep(         name = \"remove_debris\",         FUN = \"removeDebrisManualGate\",         ARGS = list(             FSCChannel = \"FSC-A\",             SSCChannel = \"SSC-A\",             gateData =  c(73615, 110174, 213000, 201000, 126000,                           47679, 260500, 260500, 113000, 35000)                    )    ) )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"remove_dead_cells\",                           FUN = \"removeDeadCellsManualGate\",                           ARGS = list(                               FSCChannel = \"FSC-A\",                               LDMarker = \"L/D Aqua - Viability\",                               gateData = c(0, 0, 250000, 250000,                                            0, 650, 650, 0)                           )                       )     )  pipL <-     addProcessingStep(         pipL,         whichQueue = \"pre-processing\",         CytoProcessingStep(             name = \"perform_QC\",             FUN = \"qualityControlPeacoQC\",             ARGS = list(                 preTransform = TRUE,                 min_cells = 150, # default                 max_bins = 500, # default                 step = 500, # default,                 MAD = 6, # default                 IT_limit = 0.55, # default                 force_IT = 150, # default                 peak_removal = 0.3333, # default                 min_nr_bins_peakdetection = 10 # default             )         )     )  pipL <-     addProcessingStep(pipL,                       whichQueue = \"pre-processing\",                       CytoProcessingStep(                           name = \"transform\",                           FUN = \"applyScaleTransforms\",                           ARGS = list()                       )     )  # execute pipeline, remove cache if existing with the same experiment name suppressWarnings(execute(pipL, rmCache = TRUE, path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [flowframe_aggregate] ... #> Proceeding with step 5 [scale_transform_estimate] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_debris] ... #> Proceeding with step 5 [remove_dead_cells] ... #> Proceeding with step 6 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor1.fcs #> Calculating peaks #> MAD analysis removed 16.54% of the measurements #> The algorithm removed 16.54% of the measurements #> Proceeding with step 7 [transform] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_debris] ... #> Proceeding with step 5 [remove_dead_cells] ... #> Proceeding with step 6 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor2.fcs #> Calculating peaks #> MAD analysis removed 5.4% of the measurements #> The algorithm removed 5.4% of the measurements #> Proceeding with step 7 [transform] ...  # re-execute as is without removing cache => all results found in cache! suppressWarnings(execute(pipL, rmCache = FALSE, path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [flowframe_aggregate]: found in cache! #> Proceeding with step 5 [scale_transform_estimate]: found in cache! #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [remove_debris]: found in cache! #> Proceeding with step 5 [remove_dead_cells]: found in cache! #> Proceeding with step 6 [perform_QC]: found in cache! #> Proceeding with step 7 [transform]: found in cache! #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [remove_debris]: found in cache! #> Proceeding with step 5 [remove_dead_cells]: found in cache! #> Proceeding with step 6 [perform_QC]: found in cache! #> Proceeding with step 7 [transform]: found in cache!  ### *** EXAMPLE 2: building CytoPipeline from JSON file *** ###  jsonDir <- system.file(\"extdata\", package = \"CytoPipeline\") jsonPath <- file.path(jsonDir, \"pipelineParams.json\")  pipL2 <- CytoPipeline(jsonPath,                        experimentName = experimentName,                       sampleFiles = sampleFiles)  # note we temporarily set working directory into package root directory # needed as json path mentions \"./\" path for sample files suppressWarnings(execute(pipL2, rmCache = TRUE, path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [flowframe_aggregate] ... #> Proceeding with step 5 [scale_transform_estimate] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_doublets] ... #> Proceeding with step 5 [remove_debris] ... #> Proceeding with step 6 [remove_dead_cells] ... #> Proceeding with step 7 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor1.fcs #> Calculating peaks #> MAD analysis removed 30.75% of the measurements #> The algorithm removed 30.75% of the measurements #> Proceeding with step 8 [transform] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_doublets] ... #> Proceeding with step 5 [remove_debris] ... #> Proceeding with step 6 [remove_dead_cells] ... #> Proceeding with step 7 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor2.fcs #> Calculating peaks #> MAD analysis removed 24.38% of the measurements #> The algorithm removed 24.38% of the measurements #> Proceeding with step 8 [transform] ...  ### *** EXAMPLE 3: building CytoPipeline from cache (previously run) *** ###  experimentName <- \"OMIP021_PeacoQC\" pipL3 <- buildCytoPipelineFromCache(     experimentName = experimentName,     path = outputDir)  suppressWarnings(execute(pipL3,         rmCache = FALSE,         path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [flowframe_aggregate]: found in cache! #> Proceeding with step 5 [scale_transform_estimate]: found in cache! #> ##################################################### #> ### NOW PRE-PROCESSING FILE Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [remove_doublets]: found in cache! #> Proceeding with step 5 [remove_debris]: found in cache! #> Proceeding with step 6 [remove_dead_cells]: found in cache! #> Proceeding with step 7 [perform_QC]: found in cache! #> Proceeding with step 8 [transform]: found in cache! #> ##################################################### #> ### NOW PRE-PROCESSING FILE Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [remove_doublets]: found in cache! #> Proceeding with step 5 [remove_debris]: found in cache! #> Proceeding with step 6 [remove_dead_cells]: found in cache! #> Proceeding with step 7 [perform_QC]: found in cache! #> Proceeding with step 8 [transform]: found in cache!"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/exportCytoPipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"exporting CytoPipeline objects — exportCytoPipeline","title":"exporting CytoPipeline objects — exportCytoPipeline","text":"functions export CytoPipeline objects various formats","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/exportCytoPipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exporting CytoPipeline objects — exportCytoPipeline","text":"","code":"export2JSONFile(x, path)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/exportCytoPipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exporting CytoPipeline objects — exportCytoPipeline","text":"x CytoPipeline object path full path name file created","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/exportCytoPipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exporting CytoPipeline objects — exportCytoPipeline","text":"export2JSONFile: nothing","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/exportCytoPipeline.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"exporting CytoPipeline objects — exportCytoPipeline","text":"export2JSONFile(): exports CytoPipeline object JSON file (writing file = side effect)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/exportCytoPipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exporting CytoPipeline objects — exportCytoPipeline","text":"","code":"outputDir <- base::tempdir()  rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                              pattern = \"Donor\"))  # build CytoPipeline object using json input jsonPath <- file.path(system.file(\"extdata\", package = \"CytoPipeline\"),                        \"pipelineParams.json\")    pipL <- CytoPipeline(jsonPath,                      experimentName = experimentName,                      sampleFiles = sampleFiles)  # remove the last pre-processing step nPreProcessing <- getNbProcessingSteps(pipL, whichQueue = \"pre-processing\") pipL <- removeProcessingStep(pipL, whichQueue = \"pre-processing\",                                     index = nPreProcessing)  # export back to json file     export2JSONFile(pipL, path = file.path(outputDir, \"newFile.json\"))"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/findTimeChannel.html","id":null,"dir":"Reference","previous_headings":"","what":"find time channel in flowSet/flowFrame — findTimeChannel","title":"find time channel in flowSet/flowFrame — findTimeChannel","text":"tries find channel flowSet/flowFrame time channel. First tries identify channel name containing 'time' string, tries identify single monotonically increasing channel.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/findTimeChannel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find time channel in flowSet/flowFrame — findTimeChannel","text":"","code":"findTimeChannel(obj, excludeChannels = c())"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/findTimeChannel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find time channel in flowSet/flowFrame — findTimeChannel","text":"obj flowCore::flowFrame flowCore::flowSet excludeChannels vector column names exclude search","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/findTimeChannel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find time channel in flowSet/flowFrame — findTimeChannel","text":"character, name found channel representing time. found, returns NULL.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/findTimeChannel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find time channel in flowSet/flowFrame — findTimeChannel","text":"","code":"data(OMIP021Samples)  ret <- findTimeChannel(OMIP021Samples[[1]]) ret # \"Time\" #> [1] \"Time\""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getAcquiredCompensationMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"extract compensation matrix from a flowCore::flowFrame — getAcquiredCompensationMatrix","title":"extract compensation matrix from a flowCore::flowFrame — getAcquiredCompensationMatrix","text":"helper function retrieving compensation matrix stored fcs file (). scans following keywords: $SPILL, $spillover $SPILLOVER","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getAcquiredCompensationMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract compensation matrix from a flowCore::flowFrame — getAcquiredCompensationMatrix","text":"","code":"getAcquiredCompensationMatrix(ff)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getAcquiredCompensationMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract compensation matrix from a flowCore::flowFrame — getAcquiredCompensationMatrix","text":"ff flowCore::flowFrame","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getAcquiredCompensationMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract compensation matrix from a flowCore::flowFrame — getAcquiredCompensationMatrix","text":"found compensation matrix","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getAcquiredCompensationMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract compensation matrix from a flowCore::flowFrame — getAcquiredCompensationMatrix","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit) compensationMatrix <- getAcquiredCompensationMatrix(fsRaw[[2]])"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getChannelNamesFromMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"get channel names from markers — getChannelNamesFromMarkers","title":"get channel names from markers — getChannelNamesFromMarkers","text":"finds name channels corresponding user provided markers","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getChannelNamesFromMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get channel names from markers — getChannelNamesFromMarkers","text":"","code":"getChannelNamesFromMarkers(ff, markers)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getChannelNamesFromMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get channel names from markers — getChannelNamesFromMarkers","text":"ff flowCore::flowFrame markers vector markers, either provided : array booleans (referring flowFrame columns) array integers (indices flowFrame columns) array characters (exact markers channel patterns)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getChannelNamesFromMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get channel names from markers — getChannelNamesFromMarkers","text":"character vector, containing names corresponding channels","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getChannelNamesFromMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get channel names from markers — getChannelNamesFromMarkers","text":"","code":"data(OMIP021Samples)  # with existing markers ret <- getChannelNamesFromMarkers(     OMIP021Samples[[1]],     c(         \"FSC-A\",         \"L/D Aqua - Viability\",         \"FITC - gdTCR\",         \"PECy5 - CD28\"     ))      ret # c(\"FSC-A\", \"525/50Violet-A\", \"530/30Blue-A\", \"670/30Yellow-A\") #> [1] \"FSC-A\"          \"525/50Violet-A\" \"530/30Blue-A\"   \"670/30Yellow-A\"  # with boolean vector indices <- c(1, 6, 14, 18) boolInput <- rep(FALSE, 21) boolInput[indices] <- TRUE ret2 <- getChannelNamesFromMarkers(     OMIP021Samples[[1]],     boolInput)      ret2 # c(\"FSC-A\", \"525/50Violet-A\", \"530/30Blue-A\", \"670/30Yellow-A\") #> [1] \"FSC-A\"          \"525/50Violet-A\" \"530/30Blue-A\"   \"670/30Yellow-A\"  # with indices vector ret3 <- getChannelNamesFromMarkers(     OMIP021Samples[[1]],     indices ) ret3 # c(\"FSC-A\", \"525/50Violet-A\", \"530/30Blue-A\", \"670/30Yellow-A\") #> [1] \"FSC-A\"          \"525/50Violet-A\" \"530/30Blue-A\"   \"670/30Yellow-A\""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getFCSFileName.html","id":null,"dir":"Reference","previous_headings":"","what":"get fcs file name — getFCSFileName","title":"get fcs file name — getFCSFileName","text":"get basename $FILENAME keyword exists","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getFCSFileName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get fcs file name — getFCSFileName","text":"","code":"getFCSFileName(ff)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getFCSFileName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get fcs file name — getFCSFileName","text":"ff flowCore::flowFrame","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getFCSFileName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get fcs file name — getFCSFileName","text":"basename $FILENAME keyword","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getFCSFileName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get fcs file name — getFCSFileName","text":"","code":"data(OMIP021Samples)  fName <- getFCSFileName(OMIP021Samples[[1]])"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getTransfoParams.html","id":null,"dir":"Reference","previous_headings":"","what":"get tranformation parameters for a specific channel — getTransfoParams","title":"get tranformation parameters for a specific channel — getTransfoParams","text":"investigates flowCore::tranformList object get type parameters transformation applying specific channel","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getTransfoParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get tranformation parameters for a specific channel — getTransfoParams","text":"","code":"getTransfoParams(transList, channel)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getTransfoParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get tranformation parameters for a specific channel — getTransfoParams","text":"transList flowCore::transformList channel channel name","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getTransfoParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get tranformation parameters for a specific channel — getTransfoParams","text":"transformation exists specified channel, either recognized logicle transfo linear transfo, list two slots: $type character containing transfo type ('logicle' 'linear') $params_list list named numeric, according transfo type Otherwise, NULL returned.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/getTransfoParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get tranformation parameters for a specific channel — getTransfoParams","text":"","code":"data(OMIP021Samples)  # set-up a hybrid transformation list : # - two channels are logicle-ly transformed with automatic param estimates # - one channel has explicit logicle transfo with default parameters # - one channel has linear transformation # - other channels have no transformation translist <- flowCore::estimateLogicle(     OMIP021Samples[[1]],     c(\"450/50Violet-A\", \"525/50Violet-A\") ) translist <- c(     translist,     flowCore::transformList(         \"FSC-A\",         flowCore::linearTransform(             a = 0.1,             b = 0        )     ),     flowCore::transformList(         \"540/30Violet-A\",         flowCore::logicleTransform()     ) )  ret1 <- getTransfoParams(translist, channel = \"FSC-A\") ret1$type # \"linear\" #> [1] \"linear\" ret1$paramsList # a = 0.1, b = 0. #> $a #> [1] 0.1 #>  #> $b #> [1] 0 #>   ret2 <- getTransfoParams(translist, channel = \"525/50Violet-A\") ret2$type # \"logicle\" #> [1] \"logicle\" ret2$paramsList # a = 0., w = 0.2834, m = 4.5, t = 262143 #> $a #> [1] 0 #>  #> $w #> [1] 0.2628157 #>  #> $m #> [1] 4.5 #>  #> $t #> [1] 262143 #>   ret3 <- getTransfoParams(translist, channel = \"540/30Violet-A\") ret3$type # \"logicle #> [1] \"logicle\" ret3$paramsList # a = 0., w = 0.5, m = 4.5, t = 262144 #> $a #> [1] 0 #>  #> $w #> [1] 0.5 #>  #> $m #> [1] 4.5 #>  #> $t #> [1] 262144 #>"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotEvents.html","id":null,"dir":"Reference","previous_headings":"","what":"plot events in 1D or 2D, using ggplot2 — ggplotEvents","title":"plot events in 1D or 2D, using ggplot2 — ggplotEvents","text":"plot events specific channels either : flowCore::flowFrame, flowCore::flowSet 2D 1D, mimicking FlowJo type graph.  1D : geom_density used  2D : geom_hex used","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotEvents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot events in 1D or 2D, using ggplot2 — ggplotEvents","text":"","code":"ggplotEvents(   obj,   xChannel,   yChannel = NULL,   nDisplayCells = Inf,   seed = NULL,   bins = 216,   fill = \"lightblue\",   alpha = 0.2,   xScale = c(\"linear\", \"logicle\"),   yScale = c(\"linear\", \"logicle\"),   xLogicleParams = NULL,   yLogicleParams = NULL,   xLinearRange = NULL,   yLinearRange = NULL,   transList = NULL,   runTransforms = FALSE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotEvents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot events in 1D or 2D, using ggplot2 — ggplotEvents","text":"obj flowCore::flowFrame flowCore::flowSet xChannel channel (name index) marker name displayed x axis yChannel channel (name index) marker name displayed y axis nDisplayCells maximum number events plotted. number events exceed number, sub-sampling performed seed seed used sub-sampling () bins used geom_hex fill used geom_density alpha used geom_density xScale scale used x axis (note \"linear\" corresponds transformation) yScale scale used y axis (note \"linear\" corresponds transformation) xLogicleParams (xScale == \"logicle\"), parameters logicle transformation used, list(w = ..., m = ..., = ..., t = ...). NULL, parameters estimated flowCore::estimateLogicle() yLogicleParams (yScale == \"logicle\"), parameters logicle transformation used, list(w = ..., m = ..., = ..., t = ...). NULL, parameters estimated flowCore::estimateLogicle() xLinearRange (xScale == \"linear\"), x axis range used yLinearRange (yScale == \"linear\"), y axis range used transList optional list scale transformations applied channel. non null, 'x/yScale', 'x/yLogicleParams' 'x/yLinear_range' discarded. runTransforms (TRUE/FALSE) application non linear scale result data effectively transformed ? TRUE, data undergo transformations prior visualization. FALSE, axis scaled data transformed.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotEvents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot events in 1D or 2D, using ggplot2 — ggplotEvents","text":"list ggplot objects","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotEvents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot events in 1D or 2D, using ggplot2 — ggplotEvents","text":"","code":"data(OMIP021Samples)  ### 1D Examples ###  # simple linear scale example ggplotEvents(OMIP021Samples[[1]],              xChannel = \"FSC-A\",              xScale = \"linear\")   # with explicit linear range ggplotEvents(OMIP021Samples[[1]],                   xChannel = \"FSC-A\",                   xScale = \"linear\",                   xLinearRange = c(0, 250000))   # with linear scale, several flow frames ggplotEvents(OMIP021Samples, xChannel = \"FSC-A\", xScale = \"linear\")   # simple logicle scale example ggplotEvents(OMIP021Samples[[1]],              xChannel = \"450/50Violet-A\",              xScale = \"logicle\")   # logicle scale, explicit parameters ggplotEvents(OMIP021Samples[[1]],              xChannel = \"450/50Violet-A\",              xScale = \"logicle\", xLogicleParams = list(                  a = 1,                  w = 2,                  m = 7,                  t = 270000))   # with sub-sampling ggplotEvents(OMIP021Samples[[2]],              xChannel = \"450/50Violet-A\",              xScale = \"logicle\", nDisplayCells = 5000)   # tuning some plot parameters ggplotEvents(OMIP021Samples[[2]],              xChannel = \"450/50Violet-A\",              xScale = \"logicle\", alpha = 0.5, fill = \"red\")   # examples that use a transformation list, estimated after compensation compensationMatrix <- flowCore::spillover(OMIP021Samples[[1]])$SPILL  ffC <- runCompensation(OMIP021Samples[[1]],                        spillover = compensationMatrix,                        updateChannelNames = FALSE)  transList <- flowCore::estimateLogicle(     ffC,     colnames(compensationMatrix))  transList <-     c(transList,       flowCore::transformList(           \"FSC-A\",           flowCore::linearTransform(a = 0.00001)))  # linear example, without running the transformations on data ggplotEvents(OMIP021Samples[[1]],              xChannel = \"450/50Violet-A\",              xScale = \"linear\",               transList = transList,              runTransforms = FALSE)   # linear example, now running the transformations on data ggplotEvents(OMIP021Samples[[1]],              xChannel = \"450/50Violet-A\",              xScale = \"linear\",               transList = transList,              runTransforms = TRUE)   # logicle example, without running the transformations on data ggplotEvents(OMIP021Samples[[1]],              xChannel = \"FSC-A\",              xScale = \"logicle\",               transList = transList,              runTransforms = FALSE)   # logicle example, now running the transformations on data ggplotEvents(OMIP021Samples[[1]],              xChannel = \"FSC-A\",              xScale = \"logicle\",               transList = transList,              runTransforms = TRUE)   ### 2D examples ###   # simple linear example ggplotEvents(OMIP021Samples[[1]],                   xChannel = \"FSC-A\",                   xScale = \"linear\",                   yChannel = \"610/20Violet-A\",                   yScale = \"logicle\")   # simple linear example, 2 flow frames ggplotEvents(OMIP021Samples,              xChannel = \"FSC-A\",              xScale = \"linear\",              yChannel = \"SSC-A\",              yScale = \"linear\")   # logicle vs linear example ggplotEvents(OMIP021Samples[[1]],              xChannel = \"450/50Violet-A\",              xScale = \"logicle\",              yChannel = \"SSC-A\",              yScale = \"linear\")   # 2X logicle example ggplotEvents(OMIP021Samples[[1]],              xChannel = \"TETaGC\",              xScale = \"logicle\",              yChannel = \"CD27\",              yScale = \"logicle\")   # tuning nb of bins ggplotEvents(OMIP021Samples[[1]],              xChannel = \"TETaGC\",              xScale = \"logicle\",              yChannel = \"CD27\",              yScale = \"logicle\",              bins = 128)   # using transformation list, not run on data ggplotEvents(OMIP021Samples[[1]],              xChannel = \"TETaGC\",              xScale = \"logicle\",              yChannel = \"CD27\",              yScale = \"logicle\",              transList = transList,              runTransforms = FALSE)   # using transformation list, run on data                   ggplotEvents(OMIP021Samples[[1]],              xChannel = \"TETaGC\",              xScale = \"logicle\",              yChannel = \"CD27\",              yScale = \"logicle\",              transList = transList,              runTransforms = TRUE)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFilterEvents.html","id":null,"dir":"Reference","previous_headings":"","what":"plot filtered events in 2D, using ggplot — ggplotFilterEvents","title":"plot filtered events in 2D, using ggplot — ggplotFilterEvents","text":"plot events specific channels either : flowCore::flowFrame, flowCore::flowSet 2D, showing impact applying filter : 'pre' flowframe","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFilterEvents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot filtered events in 2D, using ggplot — ggplotFilterEvents","text":"","code":"ggplotFilterEvents(   ffPre,   ffPost,   xChannel,   yChannel,   nDisplayCells = 10000,   seed = NULL,   size = 0.5,   xScale = c(\"linear\", \"logicle\"),   yScale = c(\"linear\", \"logicle\"),   xLogicleParams = NULL,   yLogicleParams = NULL,   xLinearRange = NULL,   yLinearRange = NULL,   transList = NULL,   runTransforms = FALSE,   interactive = FALSE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFilterEvents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot filtered events in 2D, using ggplot — ggplotFilterEvents","text":"ffPre flowCore::flowFrame, applying filter ffPost flowCore::flowFrame, applying filter xChannel channel (name index) marker name displayed x axis yChannel channel (name index) marker name displayed y axis nDisplayCells maximum number events plotted. number events exceed number, subsampling performed seed seed used sub-sampling () size used geom_point() xScale scale used x axis (note \"linear\" corresponds transformation) yScale scale used y axis (note \"linear\" corresponds transformation) xLogicleParams (xScale == \"logicle\"), parameters logicle transformation used, list(w = ..., m = ..., = ..., t = ...) NULL, parameters estimated flowCore::estimateLogicle() yLogicleParams (yScale == \"logicle\"), parameters logicle transformation used, list(w = ..., m = ..., = ..., t = ...) NULL, parameters estimated flowCore::estimateLogicle() xLinearRange (xScale == \"linear\"), linear range used yLinearRange (yScale == \"linear\"), linear range used transList optional list scale transformations applied channel. non null, 'x/yScale', 'x/yLogicleParams' 'x/yLinear_range' discarded. runTransforms (TRUE/FALSE) application non linear scale result data effectively transformed ? TRUE, data undergo transformations prior visualization. FALSE, axis scaled data transformed. interactive TRUE, transform scaling formats ggcyto::x_scale_logicle() ggcyto::y_scale_logicle() work plotly::ggplotly()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFilterEvents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot filtered events in 2D, using ggplot — ggplotFilterEvents","text":"ggplot object","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFilterEvents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot filtered events in 2D, using ggplot — ggplotFilterEvents","text":"","code":"data(OMIP021Samples)  ffPre <- OMIP021Samples[[1]]  # creating a manual polygon gate filter based on channels L/D and FSC-A  LDMarker <- \"L/D Aqua - Viability\"  LDChannel <- getChannelNamesFromMarkers(ffPre, markers = LDMarker) liveGateMatrix <- matrix(     data = c(         50000, 50000, 100000, 200000, 200000,         100, 1000, 2000, 2000, 1     ),     ncol = 2,     dimnames = list(         c(),         c(\"FSC-A\", LDChannel)     ) )  liveGate <- flowCore::polygonGate(     filterId = \"Live\",     .gate = liveGateMatrix )  selectedLive <- flowCore::filter(ffPre, liveGate) ffL <- flowCore::Subset(ffPre, selectedLive)   # show the results  # subsample 5000 points     ggplotFilterEvents(     ffPre = ffPre,     ffPost = ffL,     nDisplayCells = 5000,     xChannel = \"FSC-A\", xScale = \"linear\",     yChannel = LDMarker, yScale = \"logicle\") +     ggplot2::ggtitle(\"Live gate filter - 5000 points\") #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`).   # with all points ggplotFilterEvents(     ffPre = ffPre,     ffPost = ffL,     nDisplayCells = Inf,     xChannel = \"FSC-A\", xScale = \"linear\",     yChannel = LDMarker, yScale = \"logicle\") +     ggplot2::ggtitle(\"Live gate filter - all points\") #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFlowRate.html","id":null,"dir":"Reference","previous_headings":"","what":"plot flow rate as a function of time, using ggplot2 — ggplotFlowRate","title":"plot flow rate as a function of time, using ggplot2 — ggplotFlowRate","text":"plot flow rate function time, using ggplot2","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFlowRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot flow rate as a function of time, using ggplot2 — ggplotFlowRate","text":"","code":"ggplotFlowRate(obj, title = \"Flow Rate\", timeUnit = 100)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFlowRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot flow rate as a function of time, using ggplot2 — ggplotFlowRate","text":"obj flowCore::flowFrame flowCore::flowSet title title graph timeUnit time interval used calculate \"instant\" flow rate (default = 100 ms)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFlowRate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot flow rate as a function of time, using ggplot2 — ggplotFlowRate","text":"ggplot graph","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/ggplotFlowRate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot flow rate as a function of time, using ggplot2 — ggplotFlowRate","text":"","code":"data(OMIP021Samples)  # single flowFrame plot ggplotFlowRate(OMIP021Samples[[1]])   # two flowFrames plot  ggplotFlowRate(OMIP021Samples)   # single plot with title ggplotFlowRate(OMIP021Samples[[1]], title = \"Test Flow Rate plot\")   # explicit time unit ggplotFlowRate(OMIP021Samples[[1]], timeUnit = 50)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/handlingProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","title":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","text":"functions manipulate processing steps processing queues CytoPipeline objects","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/handlingProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","text":"","code":"addProcessingStep(   x,   whichQueue = c(\"scale transform\", \"pre-processing\"),   newPS )  removeProcessingStep(   x,   whichQueue = c(\"scale transform\", \"pre-processing\"),   index )  getNbProcessingSteps(x, whichQueue = c(\"scale transform\", \"pre-processing\"))  getProcessingStep(   x,   whichQueue = c(\"scale transform\", \"pre-processing\"),   index )  getProcessingStepNames(x, whichQueue = c(\"scale transform\", \"pre-processing\"))  cleanProcessingSteps(   x,   whichQueue = c(\"both\", \"scale transform\", \"pre-processing\") )  showProcessingSteps(x, whichQueue = c(\"scale transform\", \"pre-processing\"))"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/handlingProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","text":"x CytoPipeline object whichQueue selects processing queue manage processing steps newPS new processing step added (CytoProcessingStep object) index index processing step remove","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/handlingProcessingSteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","text":"addProcessingStep: updated CytoPipeline object removeProcessingStep: updated CytoPipeline object getNbProcessingSteps: number processing steps present target queue getProcessingStep: obtained CytoProcessingStep object getProcessingStepNames: vector step names cleanProcessingSteps: updated CytoPipeline object showProcessingSteps: nothing (console display side effect required)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/handlingProcessingSteps.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","text":"addProcessingStep(): adds processing step one processing queues (end), returns modified CytoPipeline object removeProcessingStep(): removes processing step one processing queues, returns modified CytoPipeline object getNbProcessingSteps(): gets number processing steps processing queue getProcessingStep(): gets processing step specific index processing queue getProcessingStepNames(): gets character vector processing step names specific processing queue cleanProcessingSteps(): deletes processing steps one processing queues, returns modified CytoPipeline object showProcessingSteps(): shows processing steps processing queue","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/handlingProcessingSteps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"handling processing steps in CytoPipeline objects — handlingProcessingSteps","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                              pattern = \"Donor\")) transListPath <-      file.path(system.file(\"extdata\", package = \"CytoPipeline\"),                \"OMIP021_TransList.rds\")  # main parameters : sample files and experiment name pipelineParams <- list() pipelineParams$experimentName <- experimentName pipelineParams$sampleFiles <- sampleFiles  # create CytoPipeline object (no step defined yet) pipL <- CytoPipeline(pipelineParams)  # add a processing step in scale tranformation queue pipL <- addProcessingStep(pipL,                           whichQueue = \"scale transform\",                           CytoProcessingStep(                               name = \"scale_transform_read\",                               FUN = \"readRDS\",                               ARGS = list(file = transListPath)                           ))  getNbProcessingSteps(pipL, \"scale transform\") # returns 1 #> [1] 1  # add another processing step in scale transformation queue pipL <- addProcessingStep(pipL,                           whichQueue = \"scale transform\",                           CytoProcessingStep(                               name = \"scale_transform_sum\",                               FUN = \"sum\",                               ARGS = list()                           ) )  getNbProcessingSteps(pipL, \"scale transform\") # returns 2 #> [1] 2  getProcessingStepNames(pipL, whichQueue = \"scale transform\") #> [1] \"scale_transform_read\" \"scale_transform_sum\"   # removes second processing step in scale transformation queue pipL <- removeProcessingStep(pipL,                              whichQueue = \"scale transform\",                              index = 2)  # get processing step object pS <- getProcessingStep(pipL, whichQueue = \"scale transform\", index = 1) getCPSName(pS) #\"scale_transform_read\" #> [1] \"scale_transform_read\"  # add a processing step in pre-processing queue pipL <- addProcessingStep(pipL,                           whichQueue = \"pre-processing\",                           CytoProcessingStep(                               name = \"pre-processing_sum\",                               FUN = \"sum\",                               ARGS = list()                           )) getNbProcessingSteps(pipL, \"scale transform\") # returns 1 #> [1] 1 getNbProcessingSteps(pipL, \"pre-processing\") # returns also 1 #> [1] 1  showProcessingSteps(pipL, whichQueue = \"scale transform\") #> Scale transformations evaluation queue : 1 processing step(s) #> 1 :Object of class \"CytoProcessingStep\" #>  Name: scale_transform_read #>  Function: readRDS #>  Arguments: #>   o file = /__w/_temp/Library/CytoPipeline/extdata/OMIP021_TransList.rds showProcessingSteps(pipL, whichQueue = \"pre-processing\") #> Flow frames pre-processing evaluation queue : 1 processing step(s) #> 1 :Object of class \"CytoProcessingStep\" #>  Name: pre-processing_sum #>  Function: sum  # cleans both processing queues pipL <- cleanProcessingSteps(pipL) pipL #> Pipeline object for flow cytometry experiment: OMIP021_PeacoQC  #> Sample files: 2 sample file(s) #> head(samples): #>   displayName                                         sampleFile #> 1  Donor1.fcs /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs #> 2  Donor2.fcs /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs #> No pheno data #> Scale transformations evaluation queue has no processing step #> Flow frames pre-processing evaluation queue has no processing step"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/inspectCytoPipelineObjects.html","id":null,"dir":"Reference","previous_headings":"","what":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","title":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","text":"functions obtain results objects formats","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/inspectCytoPipelineObjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","text":"","code":"getCytoPipelineExperimentNames(   path = \".\",   pattern = NULL,   ignore.case = FALSE,   fixed = FALSE )  getCytoPipelineObjectFromCache(   x,   path = \".\",   whichQueue = c(\"scale transform\", \"pre-processing\"),   sampleFile = NULL,   objectName )  getCytoPipelineObjectInfos(   x,   path = \".\",   whichQueue = c(\"scale transform\", \"pre-processing\"),   sampleFile = NULL )  getCytoPipelineFlowFrame(   x,   path = \".\",   whichQueue = c(\"scale transform\", \"pre-processing\"),   sampleFile,   objectName )  getCytoPipelineScaleTransform(   x,   path = \".\",   whichQueue = c(\"scale transform\", \"pre-processing\"),   sampleFile = NULL,   objectName )  plotCytoPipelineProcessingQueue(   x,   whichQueue = c(\"pre-processing\", \"scale transform\"),   purpose = c(\"run status\", \"description\"),   sampleFile = NULL,   path = \".\",   title = TRUE,   box.type = \"ellipse\",   lwd = 1,   box.prop = 0.5,   box.cex = 0.7,   cex.txt = 0.7,   box.size = 0.1,   dtext = 0.15,   ... )  collectNbOfRetainedEvents(experimentName, path = \".\", whichSampleFiles)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/inspectCytoPipelineObjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","text":"path root path locate search file caches pattern optional pattern limiting search experiment names ignore.case (TRUE/FALSE) used pattern matching (grepl) fixed (TRUE/FALSE) used pattern matching (grepl) x CytoPipeline object whichQueue queue look sampleFile sampleFile looked : whichQueue == \"scale transform\", sampleFile ignored NULL whichQueue == \"pre-processing\", sampleFile defaulted first one belonging experiment objectName (character) object name look purpose purpose workflow plot \"run status\" (default), disk cache inspected box colours set according run status (green = run, orange = run, red = definition consistent cache). Moreover, object classes names filled found cache. \"description\", workflow obtained step definition x object, disk cache. result, boxes coloured black, object class name provided. title TRUE, adds title plot box.type shape label box (rect, ellipse, diamond, round, hexa, multi) lwd default line width arrow box (one numeric value) box.prop length/width ratio label box (one numeric value) box.cex relative size text boxes (one numeric value) cex.txt relative size arrow text (one numeric value) box.size size label box (one numeric value) dtext controls position arrow text relative arrowhead (one numeric value) ... arguments passed diagram::plotmat() experimentName experimentName used select file cache disk whichSampleFiles indicates sample files number retained events collected. missing, sample files used.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/inspectCytoPipelineObjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","text":"getCytoPipelineExperimentNames: vector character containing found experiment names getCytoPipelineObjectFromCache: found object (stops error message target object found) getCytoPipelineObjectInfos: dataframe collected information found objects (stops error message target object found) getCytoPipelineFlowFrame: found flowFrame (stops error message target object found, object flowFrame) getCytoPipelineScaleTransform: found flowFrame (stops error message target object found, object transformList) plotCytoPipelineProcessingQueue: nothing collectNbOfRetainedEvents: dataframe collected number events columns refer pre-processing steps rows refer samples","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/inspectCytoPipelineObjects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","text":"getCytoPipelineExperimentNames(): function looks path stored file caches gets corresponding experiment names getCytoPipelineObjectFromCache(): Given CytoPipeline object, function retrieves specific object corresponding file cache getCytoPipelineObjectInfos(): Given CytoPipeline object, function retrieves information related specific object name, .e. object name object class getCytoPipelineFlowFrame(): Given CytoPipeline object, function retrieves specific flowCore::flowFrame object corresponding file cache object name object class getCytoPipelineScaleTransform(): Given CytoPipeline object, function retrieves specific flowCore::transformList object corresponding file cache plotCytoPipelineProcessingQueue(): functions displays plot processing queue CytoPipeline object, using diagram::plotmat(). step run state sample files, corresponding box appears green step non run state least one sample file, corresponding box appears orange least one step consistent cache, whole set boxes appears red collectNbOfRetainedEvents(): Given CytoPipeline object, function retrieves, pre-processing steps, given output flowFrame, number retained event.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/inspectCytoPipelineObjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inspect CytoPipeline results objects — inspectCytoPipelineObjects","text":"","code":"# preliminary run: # build CytoPipeline object using json input, run and store results in cache rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                              pattern = \"Donor\"))  jsonDir <- system.file(\"extdata\", package = \"CytoPipeline\") jsonPath <- file.path(jsonDir, \"pipelineParams.json\") outputDir <- base::tempdir() pipL <- CytoPipeline(jsonPath,                      experimentName = experimentName,                      sampleFiles = sampleFiles)  # note we temporarily set working directory into package root directory # needed as json path mentions \"./\" path for sample files suppressWarnings(execute(pipL, rmCache = TRUE, path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [flowframe_aggregate] ... #> Proceeding with step 5 [scale_transform_estimate] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_doublets] ... #> Proceeding with step 5 [remove_debris] ... #> Proceeding with step 6 [remove_dead_cells] ... #> Proceeding with step 7 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor1.fcs #> Calculating peaks #> MAD analysis removed 30.75% of the measurements #> The algorithm removed 30.75% of the measurements #> Proceeding with step 8 [transform] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_doublets] ... #> Proceeding with step 5 [remove_debris] ... #> Proceeding with step 6 [remove_dead_cells] ... #> Proceeding with step 7 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor2.fcs #> Calculating peaks #> MAD analysis removed 24.38% of the measurements #> The algorithm removed 24.38% of the measurements #> Proceeding with step 8 [transform] ...        # get a list of all stored experiments in a specific path taken as root dir experimentNames <- getCytoPipelineExperimentNames(path = outputDir)  # rebuilding Cytopipeline object from cache pipL2 <- buildCytoPipelineFromCache(experimentName = experimentNames[1],                                     path = outputDir)  # plot scale transformation queue plotCytoPipelineProcessingQueue(pipL2, whichQueue = \"pre-processing\",                                 path = outputDir) #> no sample file passed as argument => defaulting to first sample file   # plot pre-processing queue plotCytoPipelineProcessingQueue(pipL2, whichQueue = \"scale transform\",                                 path = outputDir)                                   # get object infos for a specific queue df <- getCytoPipelineObjectInfos(pipL2, whichQueue = \"pre-processing\",                                  path = outputDir,                                  sampleFile = sampleFiles(pipL2)[1])                                   # get transform list (output of one step) trans <-     getCytoPipelineScaleTransform(pipL2, whichQueue = \"scale transform\",                                   objectName =                                       \"scale_transform_estimate_obj\",                                   path = outputDir)  # get flowFrame (output of one step) ff <- getCytoPipelineFlowFrame(pipL2, whichQueue = \"pre-processing\",                                objectName = \"remove_doublets_obj\",                                path = outputDir,                                sampleFile = sampleFiles(pipL2)[1])  # get any object (output of one step) obj <-     getCytoPipelineObjectFromCache(pipL2, whichQueue = \"scale transform\",                                    objectName = \"compensate_obj\",                                    path = outputDir) class(obj) # flowCore::flowSet  #> [1] \"flowSet\" #> attr(,\"package\") #> [1] \"flowCore\"  # collect number of retained events at each step nbEventsDF <- collectNbOfRetainedEvents(          experimentName = experimentNames[1],         path = outputDir)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/interactingWithCytoPipelineCache.html","id":null,"dir":"Reference","previous_headings":"","what":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","title":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","text":"functions supporting interaction CytoPipeline object file cache disk","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/interactingWithCytoPipelineCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","text":"","code":"deleteCytoPipelineCache(x, path = \".\")  buildCytoPipelineFromCache(experimentName, path = \".\")  checkCytoPipelineConsistencyWithCache(   x,   path = \".\",   whichQueue = c(\"both\", \"scale transform\", \"pre-processing\"),   sampleFile = NULL )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/interactingWithCytoPipelineCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","text":"x CytoPipeline object path full path experiment storage disk (without /.cache) experimentName experimentName used select file cache disk whichQueue processing queue check consistency sampleFile whichQueue == \"pre-processing\" \"\": sample file(s) check disk cache","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/interactingWithCytoPipelineCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","text":"deleteCytoPipelineCache: TRUE successfully removed buildCytoPipelineFromCache: built CytoPipeline object checkCytoPipelineConsistencyWithCache: list following values: isConsistent (TRUE/FALSE) inconsistencyMsg: character filled inconsistency message case cache CytoPipeline object consistent scaleTransformStepStatus: character vector, containing, scale transform step, status c(\"run\", \"run\", \"inconsistent\") preProcessingStepStatus: character matrix, containing, pre-processing step (rows), sample file (columns), status c(\"run\", \"run\", \"inconsistent\")","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/interactingWithCytoPipelineCache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","text":"deleteCytoPipelineCache(): delete whole disk cache corresponding experiment CytoPipeline object buildCytoPipelineFromCache(): builds new CytoPipeline object, based information stored file cache checkCytoPipelineConsistencyWithCache(): check consistency processing steps described CytoPipeline object, stored file cache","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/interactingWithCytoPipelineCache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"interaction between CytoPipeline object and disk cache — interactingWithCytoPipelineCache","text":"","code":"# preliminary run: # build CytoPipeline object using json input, run and store results in cache rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") experimentName <- \"OMIP021_PeacoQC\" sampleFiles <- file.path(rawDataDir, list.files(rawDataDir,                                              pattern = \"Donor\"))                                               jsonDir <- system.file(\"extdata\", package = \"CytoPipeline\") jsonPath <- file.path(jsonDir, \"pipelineParams.json\") outputDir <- base::tempdir() pipL <- CytoPipeline(jsonPath,                      experimentName = experimentName,                      sampleFiles = sampleFiles)  # note we temporarily set working directory into package root directory # needed as json path mentions \"./\" path for sample files suppressWarnings(execute(pipL, rmCache = TRUE, path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [flowframe_aggregate] ... #> Proceeding with step 5 [scale_transform_estimate] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor1.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_doublets] ... #> Proceeding with step 5 [remove_debris] ... #> Proceeding with step 6 [remove_dead_cells] ... #> Proceeding with step 7 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor1.fcs #> Calculating peaks #> MAD analysis removed 30.75% of the measurements #> The algorithm removed 30.75% of the measurements #> Proceeding with step 8 [transform] ... #> ##################################################### #> ### NOW PRE-PROCESSING FILE /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read] ... #> Proceeding with step 2 [remove_margins] ... #> Removing margins from file : Donor2.fcs #> Proceeding with step 3 [compensate] ... #> Proceeding with step 4 [remove_doublets] ... #> Proceeding with step 5 [remove_debris] ... #> Proceeding with step 6 [remove_dead_cells] ... #> Proceeding with step 7 [perform_QC] ... #> Applying PeacoQC method... #> Starting quality control analysis for Donor2.fcs #> Calculating peaks #> MAD analysis removed 24.38% of the measurements #> The algorithm removed 24.38% of the measurements #> Proceeding with step 8 [transform] ...        # rebuild CytoPipeline from stored results in cache, for a specific  # experiment  experimentName <- \"OMIP021_PeacoQC\" pipL2 <- buildCytoPipelineFromCache(     experimentName = experimentName,     path = outputDir)   # checking consistency between CytoPipeline object and cache res <- checkCytoPipelineConsistencyWithCache(pipL2) #res  suppressWarnings(execute(pipL2, rmCache = FALSE, path = outputDir)) #> ##################################################### #> ### running SCALE TRANSFORMATION processing steps ### #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [flowframe_aggregate]: found in cache! #> Proceeding with step 5 [scale_transform_estimate]: found in cache! #> ##################################################### #> ### NOW PRE-PROCESSING FILE Donor1.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [remove_doublets]: found in cache! #> Proceeding with step 5 [remove_debris]: found in cache! #> Proceeding with step 6 [remove_dead_cells]: found in cache! #> Proceeding with step 7 [perform_QC]: found in cache! #> Proceeding with step 8 [transform]: found in cache! #> ##################################################### #> ### NOW PRE-PROCESSING FILE Donor2.fcs... #> ##################################################### #> Proceeding with step 1 [flowframe_read]: found in cache! #> Proceeding with step 2 [remove_margins]: found in cache! #> Proceeding with step 3 [compensate]: found in cache! #> Proceeding with step 4 [remove_doublets]: found in cache! #> Proceeding with step 5 [remove_debris]: found in cache! #> Proceeding with step 6 [remove_dead_cells]: found in cache! #> Proceeding with step 7 [perform_QC]: found in cache! #> Proceeding with step 8 [transform]: found in cache! # (everything is already stored in cache)  # deleting cache related to a specific experiment pipL3 <- CytoPipeline(experimentName = experimentName) deleteCytoPipelineCache(pipL3, path = outputDir) #> [1] TRUE"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlFlowAI.html","id":null,"dir":"Reference","previous_headings":"","what":"perform QC with flowAI — qualityControlFlowAI","title":"perform QC with flowAI — qualityControlFlowAI","text":"function wrapper around flowAI::flow_auto_qc() function. also pre-selects channels handled (=> signal channels)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlFlowAI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perform QC with flowAI — qualityControlFlowAI","text":"","code":"qualityControlFlowAI(   ff,   preTransform = FALSE,   transList = NULL,   outputDiagnostic = FALSE,   outputDir = NULL,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlFlowAI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perform QC with flowAI — qualityControlFlowAI","text":"ff flowCore::flowFrame preTransform TRUE, apply transList scale transform prior running gating algorithm transList applied conjunction preTransform outputDiagnostic TRUE, stores diagnostic files generated flowAI outputDir directory outputDir used conjunction outputDiagnostic ... additional parameters passed flowAI::flow_auto_qc()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlFlowAI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perform QC with flowAI — qualityControlFlowAI","text":"flowCore::flowFrame removed low quality events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlFlowAI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"perform QC with flowAI — qualityControlFlowAI","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_QualityControl <-      qualityControlFlowAI(fsRaw[[2]],                          remove_from = \"all\", # all default                          second_fractionFR = 0.1,                          deviationFR = \"MAD\",                          alphaFR = 0.01,                          decompFR = TRUE,                          outlier_binsFS = FALSE,                          pen_valueFS = 500,                          max_cptFS = 3,                          sideFM = \"both\",                          neg_valuesFM = 1)) #> Applying flowAI method... #> Quality control for the file: Donor2 #> 66.42% of anomalous cells detected in the flow rate check.  #> 0% of anomalous cells detected in signal acquisition check.  #> 0.1% of anomalous cells detected in the dynamic range check."},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlPeacoQC.html","id":null,"dir":"Reference","previous_headings":"","what":"perform QC with PeacoQC — qualityControlPeacoQC","title":"perform QC with PeacoQC — qualityControlPeacoQC","text":"function wrapper around PeacoQC::PeacoQC() function. also pre-selects channels handled (=> signal channels)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlPeacoQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perform QC with PeacoQC — qualityControlPeacoQC","text":"","code":"qualityControlPeacoQC(   ff,   preTransform = FALSE,   transList = NULL,   outputDiagnostic = FALSE,   outputDir = NULL,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlPeacoQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perform QC with PeacoQC — qualityControlPeacoQC","text":"ff flowCore::flowFrame preTransform TRUE, apply transList scale transform prior running gating algorithm transList applied conjunction preTransform outputDiagnostic TRUE, stores diagnostic files generated PeacoQC outputDir directory outputDir used conjunction outputDiagnostic ... additional parameters passed PeacoQC::PeacoQC()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlPeacoQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perform QC with PeacoQC — qualityControlPeacoQC","text":"flowCore::flowFrame removed low quality events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/qualityControlPeacoQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"perform QC with PeacoQC — qualityControlPeacoQC","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")          transList <-      estimateScaleTransforms(                 ff = ff_c,         fluoMethod = \"estimateLogicle\",         scatterMethod = \"linear\",         scatterRefMarker = \"BV785 - CD3\")   ff_QualityControl <- suppressWarnings(     qualityControlPeacoQC(         ff_c,         preTransform = TRUE,         transList = transList,         min_cells = 150,         max_bins = 500,         MAD = 6,         IT_limit = 0.55,         force_IT = 150,          peak_removal = (1/3),         min_nr_bins_peakdetection = 10)) #> Applying PeacoQC method... #> Starting quality control analysis for Donor2.fcs #> Calculating peaks #> MAD analysis removed 9.57% of the measurements #> The algorithm removed 9.57% of the measurements"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readRDSObject.html","id":null,"dir":"Reference","previous_headings":"","what":"read RDS object — readRDSObject","title":"read RDS object — readRDSObject","text":"wrapper around readRDS, discards additional parameters passed (...)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readRDSObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read RDS object — readRDSObject","text":"","code":"readRDSObject(RDSFile, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readRDSObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read RDS object — readRDSObject","text":"RDSFile RDS file containing R object object ... arguments (used)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readRDSObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read RDS object — readRDSObject","text":"read R object","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readRDSObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read RDS object — readRDSObject","text":"","code":"data(OMIP021Samples)  transListPath <- file.path(system.file(\"extdata\",                                          package = \"CytoPipeline\"),                            \"OMIP021_TransList.rds\")   transList <- readRDSObject(transListPath)  ff_c <- compensateFromMatrix(OMIP021Samples[[1]],                              matrixSource = \"fcs\")    ff_t <- applyScaleTransforms(ff_c, transList = transList)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readSampleFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Read fcs sample files — readSampleFiles","title":"Read fcs sample files — readSampleFiles","text":"Wrapper around flowCore::read.fcs() flowCore::read.flowSet(). Also adds \"Cell_ID\" additional column, used flowFrames comparison","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readSampleFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read fcs sample files — readSampleFiles","text":"","code":"readSampleFiles(   sampleFiles,   whichSamples = \"all\",   nSamples = NULL,   seed = NULL,   channelMarkerFile = NULL,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readSampleFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read fcs sample files — readSampleFiles","text":"sampleFiles vector character path sample files whichSamples one : '' sample files need read 'random' samples need chosen randomly (case, using nSamples seed) vector indexes pointing sampleFiles vector nSamples number samples randomly select (whichSamples == \"random\"). nSamples higher nb available samples, output samples seed optional seed parameters (provided ease reproducibility). channelMarkerFile optional path csv file provides mapping channels markers. provided, csv file contain Channel column, Marker column. Optionally 'Used' column can provided well (TRUE/FALSE). Channels 'Used' column set FALSE incorporated created flowFrame. ... additional parameters passed flowCore file reading functions.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readSampleFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read fcs sample files — readSampleFiles","text":"either flowCore::flowSet flowCore::flowFrame length(sampleFiles) == 1","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/readSampleFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read fcs sample files — readSampleFiles","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset res <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  #res  # create a flowCore::flowFrame with one single sample res2 <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = 2,     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  #res2"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeChannels.html","id":null,"dir":"Reference","previous_headings":"","what":"remove channels from a flowFrame — removeChannels","title":"remove channels from a flowFrame — removeChannels","text":": flowCore::flowFrame, remove channels given names.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeChannels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove channels from a flowFrame — removeChannels","text":"","code":"removeChannels(ff, channels)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeChannels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove channels from a flowFrame — removeChannels","text":"ff flowCore::flowFrame channels channel names removed","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeChannels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove channels from a flowFrame — removeChannels","text":"new flowCore::flowFrame removed channels","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeChannels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove channels from a flowFrame — removeChannels","text":"","code":"data(OMIP021Samples)  retFF <- removeChannels(OMIP021Samples[[1]],                         channel = \"FSC-A\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDeadCellsManualGate.html","id":null,"dir":"Reference","previous_headings":"","what":"remove dead cells from a flowFrame using manual gating — removeDeadCellsManualGate","title":"remove dead cells from a flowFrame using manual gating — removeDeadCellsManualGate","text":"remove dead cells flowFrame, using manual gating FSC-, '()Live/Dead' 2D representation. function uses flowCore::polygonGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDeadCellsManualGate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove dead cells from a flowFrame using manual gating — removeDeadCellsManualGate","text":"","code":"removeDeadCellsManualGate(   ff,   preTransform = FALSE,   transList = NULL,   FSCChannel,   LDMarker,   gateData,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDeadCellsManualGate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove dead cells from a flowFrame using manual gating — removeDeadCellsManualGate","text":"ff flowCore::flowFrame preTransform boolean, TRUE: transList list scale transforms applied first LD channel. transList applied conjunction preTransform == TRUE FSCChannel character containing exact name forward scatter channel LDMarker character containing exact name marker corresponding ()Live/Dead channel, Live/Dead channel name gateData numerical vector containing polygon gate coordinates first FSCChannel channel coordinates points polygon gate, LD channel coordinates points (prior scale transform) ... additional parameters passed flowCore::polygonGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDeadCellsManualGate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove dead cells from a flowFrame using manual gating — removeDeadCellsManualGate","text":"flowCore::flowFrame removed dead cells input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDeadCellsManualGate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove dead cells from a flowFrame using manual gating — removeDeadCellsManualGate","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")                               remDeadCellsGateData <- c(0, 0, 250000, 250000,                           0, 650, 650, 0)    ff_lcells <-     removeDeadCellsManualGate(ff_c,                               FSCChannel = \"FSC-A\",                               LDMarker = \"L/D Aqua - Viability\",                               gateData = remDeadCellsGateData)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDebrisManualGate.html","id":null,"dir":"Reference","previous_headings":"","what":"remove debris from a flowFrame using manual gating — removeDebrisManualGate","title":"remove debris from a flowFrame using manual gating — removeDebrisManualGate","text":"remove debris flowFrame, using manual gating FSC-, SSC-2D representation. function internally uses flowCore::polygonGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDebrisManualGate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove debris from a flowFrame using manual gating — removeDebrisManualGate","text":"","code":"removeDebrisManualGate(ff, FSCChannel, SSCChannel, gateData, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDebrisManualGate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove debris from a flowFrame using manual gating — removeDebrisManualGate","text":"ff flowCore::flowFrame FSCChannel character containing exact name forward scatter channel SSCChannel character containing exact name side scatter channel gateData numerical vector containing polygon gate coordinates first FSCChannel channel coordinates points polygon gate, SSCChannel channel coordinates points. ... additional parameters passed flowCore::polygonGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDebrisManualGate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove debris from a flowFrame using manual gating — removeDebrisManualGate","text":"flowCore::flowFrame removed debris events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDebrisManualGate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove debris from a flowFrame using manual gating — removeDebrisManualGate","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")           remDebrisGateData <- c(73615, 110174, 213000, 201000, 126000,                        47679, 260500, 260500, 113000, 35000)  ff_cells <-     removeDebrisManualGate(ff_c,                            FSCChannel = \"FSC-A\",                            SSCChannel = \"SSC-A\",                            gateData = remDebrisGateData)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDoubletsCytoPipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"remove doublets from a flowFrame, using CytoPipeline custom algorithm — removeDoubletsCytoPipeline","title":"remove doublets from a flowFrame, using CytoPipeline custom algorithm — removeDoubletsCytoPipeline","text":"Wrapper around CytoPipeline::singletGate(). Can apply flowStats function subsequently several channel pairs, e.g. (FSC-, FSC-H) (SSC-, SSC-H)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDoubletsCytoPipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove doublets from a flowFrame, using CytoPipeline custom algorithm — removeDoubletsCytoPipeline","text":"","code":"removeDoubletsCytoPipeline(ff, areaChannels, heightChannels, nmads, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDoubletsCytoPipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove doublets from a flowFrame, using CytoPipeline custom algorithm — removeDoubletsCytoPipeline","text":"ff flowCore::flowFrame areaChannels character vector containing name 'area type' channels one wants use heightChannels character vector containing name 'height type' channels one wants use nmads numeric vector bandwidth ratio allowed, per channels pair (cells kept ratio -channel[] -H channel[] smaller median ratio + nmad[] times median absolute deviation ratios). Default 4, channel pairs. ... additional parameters passed CytoPipeline::singletGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDoubletsCytoPipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove doublets from a flowFrame, using CytoPipeline custom algorithm — removeDoubletsCytoPipeline","text":"flowCore::flowFrame removed doublets events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeDoubletsCytoPipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove doublets from a flowFrame, using CytoPipeline custom algorithm — removeDoubletsCytoPipeline","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")          ff_s <-     removeDoubletsCytoPipeline(ff_c,                                areaChannels = c(\"FSC-A\", \"SSC-A\"),                                heightChannels = c(\"FSC-H\", \"SSC-H\"),                                nmads = c(3, 5))"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeMarginsPeacoQC.html","id":null,"dir":"Reference","previous_headings":"","what":"remove margin events using PeacoQC — removeMarginsPeacoQC","title":"remove margin events using PeacoQC — removeMarginsPeacoQC","text":"Wrapper around PeacoQC::RemoveMargins(). Also pre-selects channels handled (=> signal channels) input flowSet, applies removeMargins() flowFrame flowSet.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeMarginsPeacoQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove margin events using PeacoQC — removeMarginsPeacoQC","text":"","code":"removeMarginsPeacoQC(x, channelSpecifications = NULL, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeMarginsPeacoQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove margin events using PeacoQC — removeMarginsPeacoQC","text":"x flowCore::flowSet flowCore::flowFrame channelSpecifications list lists parameter specifications certain channels. parameter used values internal parameters description strict wrong number channels. one list per channel first minRange maxRange value. list channel name found back colnames(flowCore::exprs(ff)), corresponding marker name (found flowCore::pData(flowCore::description(ff)) ) . channel listed parameter, default internal values used. default parameter NULL. name one list set AllFluoChannels, minRange maxRange specified taken default fluorescent channels (scatter) ... additional parameters passed PeacoQC::RemoveMargins()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeMarginsPeacoQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove margin events using PeacoQC — removeMarginsPeacoQC","text":"either flowCore::flowSet flowCore::flowFrame depending input.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/removeMarginsPeacoQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove margin events using PeacoQC — removeMarginsPeacoQC","text":"","code":"rawDataDir <-      system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-      file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL fsRaw <- readSampleFiles(sampleFiles,                           truncate_max_range = truncateMaxRange,                          min.limit = minLimit) suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs ggplotFilterEvents(ffPre = fsRaw[[2]],                    ffPost = ff_m,                    xChannel = \"FSC-A\",                    yChannel = \"SSC-A\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/resetCellIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"reset 'Original_ID' column in a flowframe — resetCellIDs","title":"reset 'Original_ID' column in a flowframe — resetCellIDs","text":": flowCore::flowFrame, reset 'Original_ID' column. column can used plots comparing events pre post gating. 'Original_ID' column already exists, function replaces existing IDs user provided ones. , appendCellID() called.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/resetCellIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reset 'Original_ID' column in a flowframe — resetCellIDs","text":"","code":"resetCellIDs(ff, eventIDs = seq_len(flowCore::nrow(ff)))"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/resetCellIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reset 'Original_ID' column in a flowframe — resetCellIDs","text":"ff flowCore::flowFrame eventIDs integer vector containing values set expression matrix, Original ID's.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/resetCellIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reset 'Original_ID' column in a flowframe — resetCellIDs","text":"new flowCore::flowFrame containing amended (added) 'Original_ID' column","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/resetCellIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reset 'Original_ID' column in a flowframe — resetCellIDs","text":"","code":"data(OMIP021Samples)  ff <- appendCellID(OMIP021Samples[[1]])  subsample_ff <- subsample(ff, 100, keepOriginalCellIDs = TRUE)  # re-create a sequence of IDs, ignoring the ones before subsampling reset_ff <- resetCellIDs(subsample_ff)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/runCompensation.html","id":null,"dir":"Reference","previous_headings":"","what":"compensate with additional options — runCompensation","title":"compensate with additional options — runCompensation","text":": simple wrapper around flowCore::compensate() utility, allowing trigger update fluo channel names prefix 'comp-' (FlowJo)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/runCompensation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compensate with additional options — runCompensation","text":"","code":"runCompensation(obj, spillover, updateChannelNames = TRUE)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/runCompensation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compensate with additional options — runCompensation","text":"obj flowCore::flowFrame flowCore::flowSet spillover compensation object spillover matrix list compensation objects updateChannelNames TRUE, add 'comp-' prefix fluorochrome channels (hence impact columns related FSC, SSC, specific keyword like TIME, Original_ID, File,...) Default TRUE.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/runCompensation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compensate with additional options — runCompensation","text":"new object compensated data, possibly updated column names","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/runCompensation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compensate with additional options — runCompensation","text":"","code":"data(OMIP021Samples)  ff <- OMIP021Samples[[1]] compMatrix <- flowCore::spillover(ff)$SPILL ff <- runCompensation(ff,                        spillover = compMatrix,                        updateChannelNames = TRUE)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/singletsGate.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean doublet events from flow cytometry data — singletsGate","title":"Clean doublet events from flow cytometry data — singletsGate","text":"adjust polygon gate aimed cleaning doublet events flowFrame. main idea use ratio two indicated channel indicator select events ratio 'far' median ratio. specifically, computed ratio ch1/(1+ch2). However, instead looking constant range ratio, done PeacoQC::removeDoublets(), leads semi-conic gate, apply parallelogram shaped gate, keeping constant range channel 2 intensity, based target ratio range mid value channel 1.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/singletsGate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean doublet events from flow cytometry data — singletsGate","text":"","code":"singletsGate(   ff,   filterId = \"Singlets\",   channel1 = \"FSC-A\",   channel2 = \"FSC-H\",   nmad = 4,   verbose = FALSE )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/singletsGate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean doublet events from flow cytometry data — singletsGate","text":"ff flowCore::flowframe contains flow cytometry data. filterId name filter returned channel1 first channel used determine doublet events. Default \"FSC-\" channel2 second channels used determine doublet events. Default \"FSC-H\" nmad Bandwidth ratio allowed (cells kept ratio smaller median ratio + nmad times median absolute deviation ratios). Default 4. verbose set TRUE, median ratio width printed. Default FALSE.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/singletsGate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean doublet events from flow cytometry data — singletsGate","text":"function returns flowCore::polygonGate.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/singletsGate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean doublet events from flow cytometry data — singletsGate","text":"","code":"data(OMIP021Samples)  # simple example with one single singlets gate filter  # FSC-A and FSC-H channels are used by default  mySingletsGate <- singletsGate(OMIP021Samples[[1]], nmad = 3)  selectedSinglets <- flowCore::filter(     OMIP021Samples[[1]],     mySingletsGate)  ff_l <- flowCore::Subset(OMIP021Samples[[1]], selectedSinglets)  linRange <- c(0, 250000)  ggplotFilterEvents(     ffPre = OMIP021Samples[[1]],     ffPost = ff_l,     xChannel = \"FSC-A\", xLinearRange = linRange,     yChannel = \"FSC-H\", yLinearRange = linRange)   # application of two singlets gates one after the other  singletsGate1 <- singletsGate(OMIP021Samples[[1]], nmad = 3) singletsGate2 <- singletsGate(OMIP021Samples[[1]],                               channel1 = \"SSC-A\",                               channel2 = \"SSC-H\",                               filterId = \"Singlets2\")  singletCombinedGate <- singletsGate1 & singletsGate2  selectedSinglets <- flowCore::filter(     OMIP021Samples[[1]],     singletCombinedGate)  ff_l <- flowCore::Subset(OMIP021Samples[[1]], selectedSinglets)  ggplotFilterEvents(     ffPre = OMIP021Samples[[1]],     ffPost = ff_l,     xChannel = \"FSC-A\", xLinearRange = linRange,     yChannel = \"FSC-H\", yLinearRange = linRange)   ggplotFilterEvents(     ffPre = OMIP021Samples[[1]],     ffPost = ff_l,     xChannel = \"SSC-A\", xLinearRange = linRange,     yChannel = \"SSC-H\", yLinearRange = linRange)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/subsample.html","id":null,"dir":"Reference","previous_headings":"","what":"sub-sampling of a flowFrame — subsample","title":"sub-sampling of a flowFrame — subsample","text":": sub-samples flowFrame specified number samples, without replacement. adds also column 'Original_ID' already present flowFrame.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/subsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sub-sampling of a flowFrame — subsample","text":"","code":"subsample(ff, nEvents, seed = NULL, keepOriginalCellIDs = TRUE, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/subsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sub-sampling of a flowFrame — subsample","text":"ff flowCore::flowFrame nEvents number events obtained using sub-sampling seed can set reproducibility event sub-sampling keepOriginalCellIDs TRUE, adds (already present) 'OriginalID' column containing initial IDs cell (1 nrow prior subsampling). FALSE, , takes IDs (1 nrow subsampling) ... additional parameters (currently used)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/subsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sub-sampling of a flowFrame — subsample","text":"new flowCore::flowFrame obtained subset samples","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/subsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sub-sampling of a flowFrame — subsample","text":"","code":"data(OMIP021Samples)  # take first sample of dataset, subsample 100 events and create new flowFrame ff <- subsample(OMIP021Samples[[1]], nEvents = 100)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/updateMarkerName.html","id":null,"dir":"Reference","previous_headings":"","what":"update marker name of a given flowFrame channel — updateMarkerName","title":"update marker name of a given flowFrame channel — updateMarkerName","text":": flowCore::flowFrame, update marker name (stored 'desc' parameters data) given channel. Also update corresponding keyword flowFrame.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/updateMarkerName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update marker name of a given flowFrame channel — updateMarkerName","text":"","code":"updateMarkerName(ff, channel, newMarkerName)"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/updateMarkerName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update marker name of a given flowFrame channel — updateMarkerName","text":"ff flowCore::flowFrame channel channel update marker name newMarkerName new marker name given selected channel","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/updateMarkerName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update marker name of a given flowFrame channel — updateMarkerName","text":"new flowCore::flowFrame updated marker name","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/updateMarkerName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"update marker name of a given flowFrame channel — updateMarkerName","text":"","code":"data(OMIP021Samples)  retFF <- updateMarkerName(OMIP021Samples[[1]],                           channel = \"FSC-A\",                           newMarkerName = \"Fwd Scatter-A\")"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/writeFlowFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"write flowFrame to disk — writeFlowFrame","title":"write flowFrame to disk — writeFlowFrame","text":"wrapper around flowCore::write.FCS() utils::write.csv discards additional parameter passed (...)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/writeFlowFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write flowFrame to disk — writeFlowFrame","text":"","code":"writeFlowFrame(   ff,   dir = \".\",   useFCSFileName = TRUE,   prefix = \"\",   suffix = \"\",   format = c(\"fcs\", \"csv\"),   csvUseChannelMarker = TRUE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/writeFlowFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write flowFrame to disk — writeFlowFrame","text":"ff flowCore::flowFrame dir existing directory store flowFrame, useFCSFileName TRUE filename used based original fcs filename prefix file name prefix suffix file name suffix format either fcs csv csvUseChannelMarker TRUE (default), converts channels corresponding marker names (Marker NA). setting applicable export csv format. ... arguments (used)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/writeFlowFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"write flowFrame to disk — writeFlowFrame","text":"nothing","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/reference/writeFlowFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write flowFrame to disk — writeFlowFrame","text":"","code":"rawDataDir <-     system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset res <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)      ff_c <- compensateFromMatrix(res[[2]], matrixSource = \"fcs\")  outputDir <- base::tempdir() writeFlowFrame(ff_c,                 dir = outputDir,                suffix = \"_fcs_export\",                format = \"csv\")"},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-9","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.9.4","title":"CytoPipeline 1.9","text":"improved aggregateAndSample() added setup parameter, equal “forceNEvent”, nb events selected per flow frame always balanced, always obtain nTotalEvents (except total nb available events, taking flowFrames, less nTotalEvents).","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-9-1","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.9.3","title":"CytoPipeline 1.9","text":"added sampleDisplayNames()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-9-2","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.9.2","title":"CytoPipeline 1.9","text":"sample files can now duplicate base names (provided full paths different) pData<- now liberal. can accept new pData containing rows existing sample names (corresponding subset pData taken). can accept pData row names pointing either sample file full paths base file names can accept pData row names provided number rows correspond number sample files. Row names set default sample file base names (unique), sample file full paths.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-9-3","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.9.1","title":"CytoPipeline 1.9","text":"upgraded GHA cache v4","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-17","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.7","title":"CytoPipeline 1.7","text":"(devel)","code":""},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-5","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.5.2","title":"CytoPipeline 1.5","text":"updated unit test account flowAI version change now suggesting CytoPipelineGUI package","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-5-1","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.5.1","title":"CytoPipeline 1.5","text":"updated processing step argument matching using phenoData","code":""},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-3","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.3.6","title":"CytoPipeline 1.3","text":"execute() now stores nb events retained pre-processing step, speed-collectNbOfRetainedEvents()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-3-1","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.3.5","title":"CytoPipeline 1.3","text":"added CITATION file","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-3-2","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.3.4","title":"CytoPipeline 1.3","text":"execute(), cache already exist, make clean executing pipeline steps (= preventing inconsistent cache upon crash/forced interruption)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-3-3","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.3.3","title":"CytoPipeline 1.3","text":"added collectNbOfRetainedEvents() function","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-3-4","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.3.2","title":"CytoPipeline 1.3","text":"systematically override pData cache upon execute() allow running consistently running several times increasing number samples sampleFiles<- pData<-: make sure order sample files follow one pData rownames pData exists. added ‘verbose’ argument estimateScaleTransforms()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-3-5","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.3.1","title":"CytoPipeline 1.3","text":"refactored documentation files","code":""},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.1.5","title":"CytoPipeline 1.1","text":"areSignalCols(), FluoCols() can now accept flowSet input, top flowFrame applyScaleTransforms() processing step improved (can take flowSet input, checks channel concordance transList data object)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-1","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.1.4","title":"CytoPipeline 1.1","text":"updated fcs files, source OMIP021Samples dataset","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-2","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.1.3","title":"CytoPipeline 1.1","text":"subSample(), renamed parameter ‘nSamples’ ‘nEvents’, added possibility passing unused parameters, order support use function processing step. Also amended function keep original order events (keep chronology). Finally, adds ‘keepOriginalCellIDs’ parameter (default=TRUE). simplified arguments execute() related storage results last pre-processing step.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-3","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.1.2","title":"CytoPipeline 1.1","text":"storage phenoData cache upon execution CytoPipeline object (back CytoPipeline object re-built cache) changed default behaviour estimateScaleTransforms() default method scatter channels now “none” instead “linearQuantile” changed default behaviour ggplotEvents() ggplotFilterEvents(), logicle scale used logicle parameters provided, now estimated using flowCore::estimateLogicle(), instead explicit default values","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-4","dir":"Changelog","previous_headings":"","what":"CytoPipeline 1.1.1","title":"CytoPipeline 1.1","text":"tiny modifications support upgrade Bioc 3.18","code":""},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-6","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.6","title":"CytoPipeline 1.1","text":"corrected OMIP021Samples fcs data order keep original file name bug correction: error message execution sample file added phenoData slot CytoPipeline object updated readSamples() allow passing pData parameters updated compensateFromMatrix() allow passing mapping based pData variable updated readSamples() allow selecting random number samples removed selectSamples() vignette demo links videos","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-7","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.5","title":"CytoPipeline 1.1","text":"reactivated unit tests ggplot2 objects added man page CytoPipeline package modifs vignette related Bioc review process replaced withr::local_tempdir() base::tempdir() removed extraneous whitespaces CytoPipeline show() method removed LazyData: true DESCRIPTION file replaced paste0(path, \"/\", filename) file.path(path, filename) updated License field DESCRIPTION file","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-8","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.4","title":"CytoPipeline 1.1","text":"improved CytoPipeline constructors (experimentName sampleFiles now parameters constructor version) centralized production standard outputs pipeline execution, set tuning parameters execute() instead slots CytoPipeline object.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-9","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.3","title":"CytoPipeline 1.1","text":"minor changes BiocCheck()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-10","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.2","title":"CytoPipeline 1.1","text":"removed dependencies number packages, moved corresponding implementations CytoProcessingSteps (wrappers) CytoPipelineUtils package","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-11","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.1","title":"CytoPipeline 1.1","text":"Maintenance due Bioc version change (3.17) removed use openCyto::gate_tail() (disappeared w/o deprecation), replaced flowDensity::deGate() implemented export pre-processed file (writeFlowFrame CytoProcessingStep implementation) extended readSampleFiles : mapping channels markers selectRandomSamples (new CytoProcessing step implementation)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipeline/news/index.html","id":"cytopipeline-1-1-12","dir":"Changelog","previous_headings":"","what":"CytoPipeline 0.99.0","title":"CytoPipeline 1.1","text":"Prior Bioconductor submission","code":""}]
